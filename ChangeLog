1999-09-20  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-folder-pt-proxy.c (_op_exec_or_plan_for_exec): 
	completed

	Binch of new funcs:
	(_maybe_run_next_op): 
	Called by the watch notification when 
	a threaded op is completed
	(_thread_notification_catch): 
	notification watch call back
	(_init_notify_system): 
	set up the notification channel
	(notify_availability): 
	called by threads before completion.

1999-09-18  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-folder-pt-proxy.c (_op_exec_or_plan_for_exec): 
	new func. Try to exec an operation in a thread
	or queue it if a thread is already busy.

	* camel/camel-op-queue.c (camel_op_queue_set_service_availability): 
	(camel_op_queue_get_service_availability): 
	new funcs. 

	* camel/camel-op-queue.c (camel_op_new): 
	(camel_op_free): 
	new funcs. Uses glib mem chunks.
	

1999-09-17  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-folder-pt-proxy.c (_init_with_store): 
	added notify io_channel.

	* camel/camel-op-queue.h: 
	* camel/camel-op-queue.c: 
	New object. Operation queue. Meant to be used in 
	non-blocking proxy objects.
	(camel_op_queue_run_next_op): new func. 
	run the next operation.

1999-09-14  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/Makefile.am (libcamel_la_SOURCES): 
	added camel-folder-pt-proxy.[ch] to the build
	process.

	* camel/camel-folder-pt-proxy.c (_init_with_store): 
	started implementation of the pthread-based 
	folder proxy.
	

1999-09-08  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/providers/MH/mh-summary.c 
	(mh_load_summary): 
	(mh_save_summary): 
	(mh_create_summary): 
	implemented summary (files) for MH folders.
	
	* camel/providers/MH/camel-mh-folder.c 
	(_get_message_by_uid): implemented.
	(camel_mh_folder_class_init): 
	(_get_message_uid): implemented

	* camel/camel-folder.c (camel_folder_has_uid_capability): 
	(camel_folder_get_message_uid): 
	(camel_folder_get_message_uid_by_number): 
	(camel_folder_get_message_by_uid): 
	(camel_folder_get_uid_list): 
	Documented UID methods.
	(camel_folder_get_message_uid_by_number): 
	const'ified uid.
	(camel_folder_get_message_by_uid): idem
	removed stupid camel_folder_get_message_uid_by_number
	method.
	
	* tests/ui-tests/store_listing.c (close_all): 
	close all open folders and stores. (necessary
	for UID list saving ).

	* camel/providers/MH/mh-uid.c (mh_generate_uid_list): 
	fix: store UID list in CamelMHFolder object.

	* camel/providers/MH/camel-mh-folder.c (_open): 
	read or create UID list.
	(_close): save UID list.

1999-09-07  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/md5-utils.c (md5_get_digest_from_file): 
	correct parameter decl (const)

	* camel/md5-utils.h: typo.

	* camel/providers/MH/mh-uid.c 
	More work on UID stuff for MH.
	(mh_save_uid_list): 
	(mh_load_uid_list): 
	(mh_generate_uid_list): 
	new funcs. Manage on-disk uid list.
	
	* camel/providers/MH/mh-utils.c (mh_is_a_message_file): 
	Util routines live here now.

	* camel/md5-utils.c 
	Documented all funcs.
	
	(md5_get_digest_from_stream): 
	correct typo.
	(md5_get_digest_from_file): 
	same typo corrected.
	

	* camel/md5-utils.h : 
	raw routines are declared public now.
	Md5 use has to be versatile.

	* camel/providers/MH/mh-uid.c (mh_uid_get_for_file): 
	new func. Returns an UID for an MH message.
		
1999-09-06  bertrand  <Bertrand.Guiheneuf@aful.org>


	* camel/md5-utils.h:
	* camel/md5-utils.c:
	changed names to follow camel style.
	(md5_get_digest_from_stream): 
	new methods.
	(md5_get_digest_from_file): 
	new function : get file md5 signature. 
	To be used in providers code.

	* camel/md5-utils.c: imported md5 coding 
	routine from rpm. Compiles.
	

1999-09-05  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-folder.c (camel_folder_has_uid_capability): 
	(camel_folder_get_message_uid): 
	(camel_folder_get_message_uid_by_number): 
	(camel_folder_get_message_by_uid): 
	(camel_folder_get_uid_list): 
	Basic UID framework.
	
	* devel-docs/misc/ref_and_id_proposition.txt:
	New revision. Some fixes.

	* camel/camel-folder.h (struct _CamelFolder): added 
	uid_capability field.
	

	* camel/camel-folder.c (camel_folder_close): publicized
	the close method.

	* tests/ui-tests/store_listing.c (show_folder_messages): 
	use folder summary instead of opening all messages.
	(show_folder_messages): re-enabled old CPU/Mem consumming
	method. Useful for pop3 for instance.

	* camel/providers/MH/camel-mh-folder.c (_create_summary): 
	basic and highly non-efficient summary implementation.
	Should be seen as a proof of concept only.
	subfolder summary still has to be implemented.
	
	* camel/providers/maildir/camel-maildir-folder.c (_init_with_store): 
	hasn't summary for the moment. 
	* camel/providers/maildir/camel-maildir-folder.c
	cosmetic changes.
	

1999-09-04  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/providers/MH/camel-mh-folder.c (_create_summary):
	started summary implementation.
	(_open): correct use of open.

	* camel/camel-folder.c (camel_folder_get_summary): 
	get folder associated summary object.

	* camel/Makefile.am:
	added summary files build

	* camel/camel-folder-summary.[ch]: 
	basic summary framework

1999-09-03  bertrand  <Bertrand.Guiheneuf@aful.org>

	* devel-docs/camel/Makefile.am:
	sgml doc has camel-recipient now.

	* camel/camel-recipient.c (camel_recipient_foreach_recipient_type): 
	added in-line documentation.

1999-09-02  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/providers/maildir: Added (experimental) maildir 
	provider written by Jukka Zitting <hukka@greywolves.org>
	
	* camel/providers/Makefile.am (SUBDIRS): build maildir
	provider.

	* camel/camel-provider.c (camel_provider_get_for_protocol):
	bug fix. patch from  Jukka Zitting <hukka@greywolves.org>

	* camel/camel-mime-message.c (_write_one_recipient_to_stream): 
	changed decl to fit CRLFunc. 
	(_write_recipients_to_stream): 
	calls camel_recipient_foreach_recipient_type now.

	* camel/camel-recipient.c (camel_recipient_foreach_recipient_type): 
	new convinience function. Iterate over all recipient types.

	* camel/gmime-utils.c (gmime_write_header_table_to_stream): 
	s/write_header_table_to_stream/gmime_write_header_table_to_stream/
	(gmime_write_header_with_glist_to_stream): 
	s/write_header_with_glist_to_stream/gmime_write_header_with_glist_to_stream/

1999-09-01  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-message.c (_finalize): 
	(_add_recipient): 
	(_remove_recipient): 
	(_get_recipients): now use CamelRecipientTable
	
	* camel/gmime-content-field.c: 
	(gmime_content_field_unref): test if object 
	to free is non void.

	* camel/camel-folder.c (_finalize): 
	(_set_name): 
	* camel/camel-mime-part.c (_finalize): 
	(_set_description): 
	(_set_disposition): 
	* camel/camel-service.c (_finalize): 
	* camel/camel-stream-fs.c (_finalize): 
	* camel/gmime-content-field.c: 
	(gmime_content_field_construct_from_string): 

	* camel/url-util.c (g_url_free): 

	When using g_free (obj) don't test if obj != NULL
	g_free () already do that. Thanks to elerium for
	the feedback.

1999-08-30  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-recipient.c (camel_recipient_get): 
	(camel_recipient_remove): 
	(camel_recipient_add): 
	new func. More work on new independant recipient code. 

1999-08-29  bertrand  <Bertrand.Guiheneuf@aful.org>

	* MAINTAINERS: updated my e-mail address. 

1999-08-28  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.c (camel_mime_part_set_text): 
	text parameter declared const

	* camel/camel-mime-part-utils.c (camel_mime_part_store_stream_in_buffer): 
	actually test correctly nb_bytes_read_chunk is >0

	* camel/gstring-util.c: 
	* camel/gmime-content-field.c: 
	* camel/providers/MH/camel-mh-folder.c:
	* camel/camel-stream-fs.c:
	include string.h

	* camel/camel-stream-mem.c (_write): return 
	the numver of written bytes.

	* camel/camel-stream-buffered-fs.c (_eos): 
	return sthg

	* camel/camel-stream.c (default_camel_seek): 
	return something.

1999-08-26  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.c (_get_content_object): 
	contruct the content from the buffer before calling
	CamelMedium implementation.
	(_construct_from_stream): Do not construct the content 
	by default, just store the content bytes in 
	a temporary buffer. Content will be constructed only
	at caller request (when calling CamelMedium::get_content_object)
	Providers with better access to the messages (mbox/MH ...)
	will have to provider lighter implementation, that is
	shall not read content at all unless the caller asks
	for it (again with get_content).

	* camel/camel-mime-part-utils.c: new file, groups
	mime-part related utils. Meant to be used by providers
	subclassing MimeMessage.
	(camel_mime_part_construct_headers_from_stream): 
	(camel_mime_part_construct_content_from_stream): 
	no more useless temporary hash table. 

	* camel/camel-mime-part.c (_construct_from_stream): calls
	mime-part-utils functions now.

	* camel/gmime-utils.c (_store_header_pair_from_string): 
	do not use hash table to store header, use an array instead.

1999-08-25  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.c: now descend from CamelMedium.

	* tests/test1.c (main): all headers must be strdup'ed
	(main): unref created objects

	* camel/camel-medium.c (_set_content_object): 
	(_get_content_object): these methods are 
	in CamelMedium now.

1999-08-24  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-medium.c (camel_medium_class_init): 
	new class. Will handle all sort of information media 
	(Mime mail messages, Lotus Notes  mail messages, 
	postit notes, faxes, who knows .... :)
	CamelMimePart will inherit from it.

	* camel/camel-mime-part.c (_set_disposition): 
	(_set_description):
	description and disposition parameters are now const.
	 

	* camel/gmime-content-field.c (gmime_content_field_free): added
	assertion code.

	* camel/providers/MH/camel-mh-folder.c (_get_message): 
	uses buffered stream.

	* camel/camel-stream-buffered-fs.c:
	new stream to accelerate file ops.

1999-08-20  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-stream-fs.c (camel_stream_fs_new_with_name): 
	name parameter is const. This fixes a bug in destroy ()

1999-08-18  Robert Brady  <rwb197@ecs.soton.ac.uk>

	* camel/gmime-rfc2047.c: more work on encoder.

1999-08-17  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-stream.c (camel_stream_read): 
	return the number of bytes read. 
	How can this have ever worked ?
	(camel_stream_flush): don't return anything.

	* camel/gmime-utils.c (get_header_table_from_stream): 
	mem leak fixed.

1999-08-16  bertrand  <Bertrand.Guiheneuf@aful.org>

	* tests/ui-tests/store_listing.c:
	Now has a popup menu on mailbox tree to allow
	easier tests. Implemented the copy stuff.
	Works well for the MH provider :)))

	* camel/providers/MH/camel-mh-folder.c (_copy_message_to): 
	Test MH provider fast copy implemented.
	
	
1999-08-15  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-folder.c (camel_folder_expunge): 
	moved the active list readjustment code here.
	Much saner, providers won't have to worry about
	that.
	(_copy_message_to): new method.

	* camel/providers/MH/camel-mh-folder.c (_expunge): 
	no more active list readjustment stuff.

	* camel/camel-folder.h: the expunge virtual no more
	returns a list of expunged messages. Now providers
	only have to set the expunge flag on the expunged
	messages.

	* camel/camel-folder.c (camel_folder_get_message): 
	moved the caching code here. Finally, I don't want
	providers to crash the libs with a bad message cache
	implementation. 
	(_close): do not call the CamelFolder virtual expunge 
	method directly, use camel_folder_expunge() instead.
	(camel_folder_expunge): added the want_list param. 
	The client can decide if it wants the expunged message
	list or not. If yes, it'll have to unref the messages 
	itself.

1999-08-14  bertrand  <Bertrand.Guiheneuf@aful.org>

	* tests/ui-tests/store_listing.c (delete_selected_messages): 
	(expunge_selected_folders): 
	Implemented deletion/expunge mechanism. 

	* camel/camel-folder.c (_get_message): 
	Added some debug info.

	* camel/providers/MH/camel-mh-folder.c (_expunge): 
	implemented and tested.

	* camel/camel-mime-message.c (_set_flag): 
	changed the old braindead implementation.
	boolean are inserted in the flag hash 
	table casted as gpointers.
	

	* camel/camel-mime-message.c: indentation fix
	

1999-08-13  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-folder.c (_get_message): default implementation
	to be called first by providers methods. It looks in the
	folder message list (in memory) to see if the message has
	not already been retrieved, and in this case, returns 
	the same CamelMimeMessage object

	* camel/providers/MH/camel-mh-folder.c (_get_message): set
	message->message_number correctly.

	* camel/camel-folder.h (struct _CamelFolder): 
	New field (message_list) which will hold a 
	reference on each message obtained by the folder,
	which is necessary in order for the caching procedure
	to work (Getting the same message from a folder twice
	will return the same CamelMimeMessage object).
	
	* camel/camel-folder.c (camel_folder_get_message): 
	When the store retreives a message put it in its
	message list.
	(_finalize): free message list.

	* ChangeLog: fix typo (parmanent)

	* camel/camel-folder.c (_get_permanent_flag_list): 
	(camel_folder_get_permanent_flag_list): 
	new method, returns the list of permanent
	flags supported by the folder.

	* camel/camel-mime-message.c (_get_flag_list): 
	(camel_mime_message_get_flag_list): new method,
	return the list of flag name used by this message.

	* camel/hash-table-utils.c (g_strcase_equal): 
	(g_strcase_hash): those two func go here now.

	* camel/hash_table_utils.c (hash_table_generic_free): 
	free a (gpointer, gpointer) hash table pair.

	* camel/camel-mime-message.c (camel_mime_message_init): use
	case insensitive hash table functions. 
	(_set_flag): 
	(camel_mime_message_set_flag): 
	(_get_flag): 
	(camel_mime_message_get_flag): 
	Use const for flag name, they are now
	duplicated.

1999-08-12  bertrand  <Bertrand.Guiheneuf@aful.org>

	* tests/ui-tests/store_listing.c (show_folder_messages): 
	remove stupid debug code.
	(add_mail_store): use camel_session_get_store instead
	of creating MH store directly.
	(main): load MH provider.

	* camel/camel-provider.c (camel_provider_register_as_module): 
	register new provider.
	(camel_provider_get_for_protocol): 
	Now, implementation is correct.

	* camel/camel-store.c (_finalize): 
	* camel/camel-store.h (struct _CamelStore): 
	further disabled url_name field use. 
	URL will be generated dynamically.

	* camel/camel-session.c (camel_session_get_store_for_protocol): 
	compilation and runtime fixes.

	* camel/providers/MH/camel-mh-store.c (_init): 
	synced with CamelStore.

	* camel/camel-store.c (_init): 
	in CamelStore::init, url_name is now const.
	disabled url_name copy.

	* camel/camel-session.c (camel_session_get_store): 
	new function: returns a store for an URL. 
	(camel_session_get_store_for_protocol): 
	new functionc: returns a store for a given 
	store protocol (as IMAP/POP/MH ...)
	* camel/string-utils.c (g_strcase_equal): 
	(g_strcase_hash): case insensitive hash table
	funcs.

	* camel/camel-session.c (camel_session_init): hash table
	keys are case insensitive.

	* camel/camel-provider.c (camel_provider_get_for_protocol): 
	new function, returns the last registered 
	provider for a protocol.

	* camel/providers/MH/camel-mh-provider.c: 
	new file. MH provider registration stuff.

	* camel/camel-provider.c (camel_provider_register_as_module): 
	load a provider from a shared object (plugin).
	(camel_provider_register): register a provider 
	"by hand". Used for statically defined providers.

	* tests/test7.c: new test.
	tests providers loading framework.

1999-08-11  

	* camel/camel-service.c (_finalize): 
	* camel/camel-stream-fs.c (_finalize): 
	(_destroy): close file descriptor.
	* camel/camel-stream-mem.c (_finalize): 
	* camel/camel-store.c (_finalize): 
	* camel/camel-folder.c (_finalize): 
	* camel/camel-multipart.c (_finalize): 
	* camel/camel-simple-data-wrapper.c (_finalize): 
	* camel/camel-mime-part.c (_finalize): 
	implemented destructors.
	

	* camel/gmime-content-field.c (gmime_content_field_ref): 
	(gmime_content_field_unref): 
	New reference mechanism for GMimeContentField objects.

	* camel/camel-data-wrapper.c (_finalize): 
	Started implementing destructors.

	* camel/camel-mime-part.c (_construct_from_stream): 
	* camel/gmime-content-field.c (gmime_content_field_write_to_stream): 
	* camel/camel-multipart.c (_construct_from_stream): 
	removed forgotten anarchic traces.

1999-08-10  bertrand  <Bertrand.Guiheneuf@aful.org>

	* tests/ui-tests/store_listing.c: 
	* tests/ui-tests/store_listing.glade:
	Quick and (very) dirty hack to test Camel more
	easily.

	* camel/camel-folder.c (camel_folder_append_message): 
	new method.

1999-08-09  bertrand  <Bertrand.Guiheneuf@aful.org>

	* devel-docs/misc/ref_and_id_proposition.txt:
	new file. Document message UID and vfolder
	implementation.

1999-08-08  Robert Brady  <rwb197@ecs.soton.ac.uk>

	* camel/gmime-rfc2047.c: more advanced RFC2047 encoder started.
	
1999-08-08  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/providers/MH/camel-mh-folder.c (_get_message): 
	fix. In MH, message number is not related to 
	message position in folder.

	* camel/providers/MH/camel-mh-folder.c (_is_a_message_file): 
	util func.
	(_get_message_count): implemented.

1999-08-06  bertrand  <Bertrand.Guiheneuf@aful.org>

	* devel-docs/camel/:
	updated some autogen doc stuff.
	Still don't understand warnings :(

	* camel/camel-data-wrapper.c: 
	* camel/providers/MH/camel-mh-store.c: 
	* camel/url-util.c: 
	* camel/gmime-content-field.c: 
	* camel/camel-store.c: 
	various inline doc corrections.

	* camel/camel-folder.c (get_message_count): 
	new method. Returns the number of message 
	in the folder.



1999-08-06  Robert Brady  <rwb197@ecs.soton.ac.uk>

	* tests/test6.c: encoder test.

	* camel/gmime-rfc2047.c: Fixed decoder bug : sequence
	?= is not always the terminator for an encoded-string.


1999-08-06  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/providers/MH/camel-mh-folder.c (_list_subfolders): 
	stat was not testing the good file. Fixed.
	
	* tests/test4.c (main): added real test for MH folder 
	provider. All tested things seem to work OK :)

1998-08-06  Robert Brady  <rwb197@ecs.soton.ac.uk>
	
	* tests/test5.c: test for RFC2047 decoder.

	* camel/gmime-rfc2047.c: Improved RFC2047 decoder.

1999-08-06  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/providers/MH/camel-mh-folder.c (_exists): add debug information
	(_list_subfolders): test if first char in folder name is not '.'
	before adding it to the folder list.

	* camel/camel-store.c (_init): 
	disable session check temporarily
	(_get_separator): 
	(_get_folder): new static func. 
	Fixed several oddities in class definition. 

	* camel/providers/MH/camel-mh-store.c (camel_mh_store_get_type): 
	parent type is CAMEL_STORE_TYPE not CAMEL_FOLDER_TYPE

	* camel/camel-store.c: 
	prent class is CamelServiceClass not GtkObjectClass

	* camel/url-util.c : 
	cosmetic changes + use of const when possible.
	(find_host):
	fix a bug: when there is no host and no port don't skip the '/'
	all static find_* func are now named _func_*  
	(g_url_free): destructor func.
	cache field has been disabled. Constructing the url string
	won't be too slow and will occur rarely enough that we
	do not need to add complexity to this code. 

	* camel/providers/MH/camel-mh-store.c: 
	parent class is CamelStorClass not GtkObjectClass

1999-08-05  bertrand  <Bertrand.Guiheneuf@aful.org>

	* tests/test4.c: 
	test mh provider.
	
	* camel/providers/MH/camel-mh-folder.c (_get_message): 
	implemented
	
	* camel/camel-folder.c (_get_message): 
	new method. 
	(camel_folder_get_message): 
	corresponding public call
	
	* camel/README.HACKING: 
	Some notes.

	* camel/CODING.STYLE: 
	short note about coding style. 

	* camel/README.COPYRIGHT: 
	Note about copyright policy.

	* camel/providers/MH/camel-mh-folder.c (_list_subfolders): 
	minor typo fixes.


1999-08-04  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/gmime-rfc2047.c: 
	* camel/gmime-rfc2047.h:
	indentation and cosmetic changes.
	
	* camel/providers/MH/camel-mh-folder.c (_list_subfolders): 
	implemented.
	* camel/providers/MH/camel-mh-folder.c (_delete): 
	finshed implementation
	(_delete_messages): implemented.


1999-08-04  Robert Brady  <rwb197@ecs.soton.ac.uk>

	* camel/gmime-rfc2047.[ch]: added an implemention of RFC2047
	  (support for character sets other than US-ASCII in MIME
	  headers). Not actually called from anywhere yet.


1999-08-03  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/providers/MH/camel-mh-folder.c (_create): 
	implemented.
	(_delete): started implementation.

	* camel/camel-folder.c (_get_folder): default implementation 
	calls camel_store_get_folder ().

	* camel/providers/MH/camel-mh-folder.c (_init_with_store): 
	implemented.

	* camel/camel-folder.h (struct _CamelFolder): 
	remove useless exist_on_store field.

	* camel/camel-folder.c (_exists): 
	do not use exist_on_store field.

	* camel/camel-folder.c (camel_folder_set_name): 
	(camel_folder_get_name): 
	new public functions 
	(_set_name): set full_path.

	(_set_full_name): 
	(camel_folder_set_full_name): 
	commented out this functions def. 
	It would make things very difficult to handle, and would not 
	be very useful. 
	
	* camel/providers/MH/camel-mh-store.h: 
	* camel/providers/MH/camel-mh-store.c (camel_mh_store_set_toplevel_dir): 
	(camel_mh_store_get_toplevel_dir): 
	* camel/providers/MH/camel-mh-folder.c (_set_name): 
	* camel/providers/MH/camel-mh-folder.h: 
	use (gchar *) instead of (GString *) everywhere.
	use const when necessary.
	
	* camel/camel-folder.h (struct _CamelFolder): 
	removed unused message_list field.
	
	* camel/camel-mime-part.c (_set_content_object): 
	There is a probleme here. We can not allow mime part
	content-type field and content_object mime-type to be 
	different. I thus chosed to set mime part object 
	content field to be freed (if necessary) and set
	to be a pointer to content_object mime type
	field. 
	(_construct_from_stream): set content_object mime type
	to be the same as mime_part's one. This is necessary
	because we use _set_content_type. 
	
	This two things are a bit hackish ansd may need
	to be redesigned.
	
	* camel/gmime-utils.c (gmime_write_header_pair_to_stream): 
	use g_strdup_printf and remove a bug.

	* camel/camel-simple-data-wrapper.c (_construct_from_stream): 
	more debugging output +  nb_bytes_read is now a signed int 
	to avoid bug when eos is encountered.

	* camel/camel-mime-part.c (_construct_from_stream): 
	sync to data_wrapper_repository function name changes. 
	Use default "text/plain" type when conten-type field
	is not found. (following RFC 2046 spec).

	* camel/data-wrapper-repository.c (data_wrapper_repository_set_data_wrapper_type): 
	(data_wrapper_repository_get_data_wrapper_type): 
	change function name prefix (s/data_wrapper/data_wrapper_repository/)

	* camel/camel-multipart.c (_read_part): 
	add `\n` at eol but not before boundary.

	* camel/gmime-utils.c (get_header_table_from_stream): 
	correct implementation of end of stream detection.

1999-08-01  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-multipart.c (_read_part): 
	use a stream to store the part instead of GString. 
	
	* camel/camel-mime-part.c (camel_mime_part_set_text): 
	set data wrapper content type to "text/plain".

	* camel/camel-stream-mem.c:
	* camel/camel-stream-mem.h:
	new memory buffer based stream.

	* camel/camel-stream-fs.c (_seek): 
	implementation for file system based stream.

	* camel/camel-stream.c (camel_stream_seek): 
	new method.

	* camel/camel-stream-fs.c (camel_stream_fs_class_init): 
	pass CamelStreamFsClass instead of CamelStreamClass.

1999-08-01 bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/gmime-utils.c (gmime_write_header_pair_to_stream): 
	corrected a bug with memory not allocated for '\0' in strtmp

	* camel/gmime-utils.c (gmime_read_line_from_stream): 
	do not return NULL when line is empty. 

	* camel/camel-multipart.c (_read_part): return true when end
	of multipart is found, not the opposite

1999-07-31  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/gmime-utils.c (gmime_read_line_from_stream): 
	Don't return crlf at end of line.

1999-07-30  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/gmime-utils.c (gmime_read_line_from_stream): 
	new function: reads a line from a stream.
	should be in streams utils maybe. 

1999-07-29  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.c (_construct_from_stream): 
	Uses data wrapper repository to find what data wrapper
	to use to construct the content from a stream. When 
	no object is registered for the mime type found in
	content type field a CamelSimpleDataWrapper is 
	used. 
	
	* camel/camel-mime-part.c (_get_content_type): 
	(camel_mime_part_get_content_type): returns
	a pointer on the content_type field instead 
	of the gchar * mime "type/subtype".

1999-07-28  bertrand  <Bertrand.Guiheneuf@aful.org>


	* camel/data-wrapper-repository.c
	* camel/data-wrapper-repository.h
	New files. Handles mime type <-> camel object
	(for example "multipart" <-> CamelMultipart
	* tests/tesst3.c: test data repository thing.

1999-07-26  bertrand  <Bertrand.Guiheneuf@aful.org>
	
	* camel/camel-multipart.c (_write_to_stream): 
	implemented output of multipart.
	
	* tests/test1.c (main): testing content objects operations. 

1999-07-25  bertrand  <Bertrand.Guiheneuf@aful.org>
	
	* camel/camel-mime-part.c (camel_mime_part_set_text): 
	new util function to set a mime part content to be 
	a text string.

	* camel/camel-simple-data-wrapper.c (camel_simple_data_wrapper_set_buffer_from_text): 
	new util func. 
	(camel_simple_data_wrapper_new): new func.

	* camel/camel-multipart.c (_write_to_stream): 
	implemented output of multiparts.

1999-07-24  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/gmime-content-field.c (gmime_content_field_get_parameter): 
	New function. Returns the value associated to a 
	mime parameter. 


1999-07-22  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-multipart.h: 
	* camel/camel-multipart.c:
	New class. Models multipart mime objects.
	
	* camel/camel-mime-body-part.h: 
	* camel/camel-mime-body-part.c: 
	New class. Body part is a mime part contained in 
	a multipart object.
	

1999-07-21  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-log.h: 
	implemented hard log level stuff.
	* came/*.c use "CAMEL_LOG_*" instead of "CAMEL_LOG (*"
	in order to allow hard level switch.

	* tests/test1.c: 
	* tests/test2.c: 
	updated to use gchar instead of GString. Tests passed.


1999-07-19  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-stream.c: 
	* camel/camel-stream.h: 
	"const"-antified
	

	* camel/camel-simple-data-wrapper.c: (_construct_from_stream)
	do not use any limit when constructing the object from a stream
	
	* camel/camel-stream-fs.c: 
	* camel/camel-stream-fs.h: 
	* camel/camel-mime-message.c: 
	* camel/camel-mime-message.h: 
	* camel/camel-session.c: 
	* camel/camel-session.h: 
	* camel/camel-service.c: 
	* camel/camel-service.h:
	* camel/camel-store.c: 
	* camel/camel-store.h: 
	* camel/camel-folder.c: 
	* camel/camel-folder.h: 
	* camel/gmime-utils.c: 
	* camel/gmime-utils.h: 
	GString -> gchar
	constantified what had to be.
	
	* camel/string-utils.c: 
	* camel/string-utils.h: 
	New files. Meant to replace gstring-util for gchar *
	
1999-07-16  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/gmime-content-field.c (gmime_content_field_construct_from_string): 
	GString -> gchar
	use const to indicate copied parameter.

1999-07-15  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-simple-data-wrapper.c: 
	* camel/camel-simple-data-wrapper.h: 
	Gstring -> gchar
	
1999-07-15  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/url-util.c:  
	* camel/url-util.h: 
	Do not use GStrings any more. 
	Added assertion code. 
	Cosmetic reformating
	
	* AUTHORS:
	* ChangeLog:
	Changed my email address.

	
1999-07-13  Miguel de Icaza  <miguel@gnu.org>

	* camel/gmime-base64.c (gmime_encode_base64): Implemented base64
	encoder based on CamelStreams.  Should the encoder/decoder be a
	Stream itself?

	* camel/gmime-utils.c: include config.h here.
	* camel/url-util.c: ditto.
	* camel/gstring-util.c: ditto.
	* camel/gmime-content-field.c: ditto.
	* camel/camel-stream.c: ditto.
	* camel/camel-stream-fs.c: ditto.
	* camel/camel-store.c: ditto.
	* camel/camel-simple-data-wrapper.c: ditto.
	* camel/camel-session.c: ditto.
	* camel/camel-service.c: ditto.
	* camel/camel-mime-part.c: ditto.
	* camel/camel-mime-message.c: ditto.
	* camel/camel-log.c: ditto.
	* camel/camel-data-wrapper.c: ditto
	* camel/camel-folder.c: ditto.

	* camel/camel-stream.c (camel_stream_write): Moved api
	documentation to the places that they document.
	(camel_stream_class_init): Virtual classes do not need to have a
	default implementation.  So null them all.
	(camel_stream_write): Return value from write.
	(camel_stream_available): implement.
	(camel_stream_write_strings): documented.

	* devel-docs/query/virtual-folder-in-depth.sgml: Small
	reformatting

1999-06-28  bertrand  <Bertrand.Guiheneuf@aful.org>

	* tests/test2.c (main): now use 
	CamelDataWrapper::contruct_form_stream to test 
	message parsing

	* camel/camel-data-wrapper.c: 
	* camel/camel-data-wrapper.h: 
	construct_from_stream no longer has maximimum size arg.

	* camel/camel-mime-part.c (_construct_from_stream): new.
	Construct the mime_part from a stream.

	* camel/camel-mime-part.c:
	new field (content_type) and associated methods.
	(camel_mime_part_init): initialize content_type field.
	(_parse_header_pair): now set content_type MimePart field
	instead of using DataWrapper Mime typing facility.

1999-06-28  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-data-wrapper.h: 
	s/content_type/mime_type/

1999-06-24  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-simple-data-wrapper.[ch]:
	new class. Simple implementation of a data wrapper:
	simply keeps the stream result in a byte array.

	* camel/camel-mime-part.c (_parse_header_pair): added a warning. 
	Have to think about the correct way to store content type stuff.

1999-06-24  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-message.c (_write_one_recipient_to_stream): 
	includes gmime-utils header. 
	patch from Ulrich Drepper <drepper at cygnus.com>
	set separator string in write_header_with_glist_to_stream()
	
	* camel/camel-log.c (camel_log): 
	patch from Ulrich Drepper <drepper at cygnus.com>
	Do not use stderr in initialization of logfile descriptor.
	
	* camel/camel-stream-fs.c (camel_stream_fs_new_with_name): 
	patch from Ulrich Drepper <drepper at cygnus.com>
	initialize mode field in open(). 

1999-06-22  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-data-wrapper.c (_get_content_type): 
	moved all the content-type stuff here.
	(camel_data_wrapper_init): initialize the instance
	content-type field.

	* camel/camel-mime-part.c (_parse_header_pair): 
	parse Content-Type stuff in header. 
	(_write_to_stream): write the content type stuff to 
	the stream.

	* camel/gmime-content-field.c (gmime_content_field_get_mime_type): 
	new function, returns "type/subtype" mime type string.
	(gmime_content_field_construct_from_string): 
	new function, construbt a content_field object
	form a string. be used to set the mime_type from a
	string.

	* camel/camel-mime-part.c (_set_content_type): 
	(camel_mime_part_set_content_type): 
	(_get_content_type): 
	(_get_content_type): 
	new methods.

1999-06-21  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/gmime-utils.c (get_header_table_from_stream): 
	replace CR/LF+'\t' with ' ' 

	* camel/camel-mime-message.c (_set_recipient_list_from_string): 
	trim \t when splitting

	* camel/gmime-utils.c (get_header_table_from_file): 
	corrected bug in scanning tabulations ('t' -> '\t')

	* tests/test2.c (main): read mail.test instead
	of mail1.test

	* camel/camel-mime-part.c (_add_header): 
	added comments 

1999-06-03  bertrand  <Bertrand.Guiheneuf@aful.org>

	* devel-docs/query/virtual-folder-in-depth.sgml: 
	sgmlized Giao's doc about virtual folders.

1999-05-31  bertrand  <Bertrand.Guiheneuf@aful.org>

	* tests/test2.c (main): 
	use new stream code instead of raw file * stuff.

	* camel/gmime-utils.c (get_header_table_from_stream): 
	new func. Will replace get_header_table_from_file and will
	be used to parse headers from files as well as from 
	memory buffers.

	* camel/camel-stream-fs.c:
	CamelStream Subclass. File system based
	stream.
	

1999-05-30  bertrand  <Bertrand.Guiheneuf@aful.org>

 	* camel/camel-stream.h: new class. Represents an 
	abstract stream object.

       * camel/camel-mime-message.c (_set_recipient_list_from_string): 
	remove leading and trailing spaces in recipient addresses.

	* camel/gmime-utils.c (_store_header_pair_from_gstring): 
	remove leading and trailing spaces from header values.

	* camel/gstring-util.c (g_string_trim): new
	func: remove leading or trailng chars from 
	a specified char set.
	(g_string_split): allow trimming of substrings.

	* tests/test1.c (main): remove gtk_main call

1999-05-28  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.c 
	(_parse_header_pair): 
	(_init_header_name_table): 
	More header parsing code.

	
1999-05-27  bertrand  <Bertrand.Guiheneuf@aful.org>

	* tests/test2.c (main): rewrite message obtained via
	parsing into a file. Actually, it works pretty well :))

	* camel/camel-mime-message.c (_set_recipient_list_from_string): 
	create recipient list form a comma separated string.
	(_parse_header_pair): added recipient lists parsing.

	* camel/camel-mime-part.c (_parse_header_pair): 
	new (protected) method. Parse a head pair and
	decides what to do with it.
	
	(_add_header): Call in _parse_header_pair

	* camel/camel-mime-message.c (_parse_header_pair): 
	overload  header parsing MimePart mthod.

	* camel/gstring-util.c (g_string_split): 
	new func: split a gstring into a GList of
	substring.

1999-05-26  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/gmime-utils.c (get_header_lines_from_file): 
	new func. Parses message header zone and returns
	a Glist of all header lines.

	* tests/test2.c: tests message parsing

	* camel/gmime-utils.c (write_header_table_to_file): 
	new func to write a table of headers.

1999-05-20  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-message.c (_write_to_file): 
	recipient list printing
	
	* tests/test1.c (main): more tests.

1999-05-19  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.c (_write_to_file): test if content
	exists before calling its write_to method.

	* camel/camel-mime-message.c (_write_to_file): bugs fix.

	* camel/camel-mime-message.c (camel_mime_message_new_with_session): 
	new func. Creates a message with the session field set
	up correctly.

1999-05-18  bertrand  <Bertrand.Guiheneuf@aful.org>

	* tests/test1.c (main): tests

	* camel/camel-mime-message.c (_write_to_file): 
	started write_to framework for mime_messages

	* camel/camel-mime-message.c (*_message_number): 
	message number funcs.
	
1999-05-15  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-message.c (*_flag): 
	flags handling methods

1999-05-14  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-message.c (camel_mime_message_class_init): 
	added recipient handling class funcs.

1999-05-13  bertrand  <Bertrand.Guiheneuf@aful.org>
        
	* camel/camel-mime-message.c (camel_mime_message_init): 
	create recipients hash table
	(_remove_recipient): 
	(_add_recipient):
	(_get_recipients):  new funcs.
	Internal Recipients data structure is
	a bit complicated though.

	* camel/camel-mime-part.c (camel_mime_part_init): 
	create headers hash table

	* camel/camel-mime-message.h: 
	a bunch of get/set header field
	method done. Does nothing yet though.

	* camel/camel-mime-message.[ch] :
	new file. 

1999-05-12  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.h (struct ): 
	disposition is now a full GMimeContentField
	object.

	* camel/gmime-content-field.c: new file
	handle "type/subtype ;parameter=value ; parameter=value ..."
	BNF grammar elements
	(gmime_content_field_write_to_file): new func
	
	* camel/gmime-utils.c (gmime_write_header_pair_to_file): 
	namespace change

1999-05-11  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.c (_write_to_file): 
	overload wrapper class method.
	(_write_to_file): start to write some text in 
	file.

	* camel/camel-store.c: typo fix.

	* camel/camel-store.c: 
	* camel/camel-service.c: 
	* camel/camel-folder.c: 
	* camel/camel-data-wrapper.c: 
	* camel/camel-mime-part.c: 
	static functions naming follows gnome 
	coding style guide.

	* camel/camel-mime-part.h: implemented public interfaces
	

1999-05-10  Bertrand Guiheneuf  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.c (__camel_mime_part_get_header_lines): 
	(__camel_mime_part_set_header_lines): 
	(__camel_mime_part_get_content_languages): 
	(__camel_mime_part_set_content_languages): 
	(__camel_mime_part_get_encoding): 
	(__camel_mime_part_set_encoding): 
	(__camel_mime_part_get_content_MD5): 
	(__camel_mime_part_set_content_MD5): 
	(__camel_mime_part_get_content_id): 
	(__camel_mime_part_set_content_id): 
	A bunch of new set/get func.

	* camel/gstring-util.c (g_string_list_free): 
	convenience function for string list 
	complete deallocation.

1999-05-09  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.c (__camel_mime_part_add_header): 
	new method

	* camel/camel-mime-part.h (struct CamelMimePart):
	added core fields.

1999-05-08  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.[ch]: 
	new class. models a mime mail part.

	* camel/camel-data-wrapper.c 
	(camel_data_wrapper_write_to_buffer): method to
	stream data content in a buffer.
	(camel_data_wrapper_write_to_file): 
	(camel_data_wrapper_construct_from_buffer): 
	(camel_data_wrapper_construct_from_file): 
	new methods.
	
1999-05-07  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-data-wrapper.[ch]:new class.
	This should not be a class but rather an 
	interface. The day Gtk support interfaces, 
	it dataWrapper should become an interface.

1999-05-04  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-service.c (camel_service_get_url): 
	new method.

	* devel-docs/camel/camel-sections.txt: added 
	function doc references

	* camel/camel-folder.c (__camel_folder_close): 
	fixed indentation.
	(camel_folder_expunge): new method.
	(__camel_folder_close): used expunge flag

1999-05-03  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-folder.c (camel_folder_get_mode): 
	typo fix

	* camel/camel-folder.c (__camel_folder_list_subfolders): 
	new func.

	* some doc stuffs
	

1999-05-01  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-folder.c 
	(__camel_folder_get_mode): 
	(camel_folder_get_mode): 
	(camel_folder_get_parent_store): 
	(__camel_folder_get_parent_store): 
	(camel_folder_get_parent_folder): 
	(__camel_folder_get_parent_folder): 
	new methods

	* camel/camel-service.c: put __ prefix before
	private virtual funcs.

	* camel/camel-folder.c (camel_folder_delete): 
	(camel_folder_delete_messages): 
	new methods.

	* camel/url-util.c (g_url_new): some
	more comments 

1999-04-27  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-folder.c (camel_folder_create): 
	new public function.

1999-04-25  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-session.c (camel_session_get_store_from_provider): 
	initialize folder object.

	* camel/camel-store.c (init): new method.
	called by session object at instantiation time.

	* camel/camel-store.h (struct _CamelStore): 
	new fields : session and url_name

1999-04-25  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-session.c (camel_session_set_provider): 
	new method to set the default provider for a protocol.
	(camel_session_get_store_from_provider): 
	new method to instantiate a folder from a provider.

	* camel/camel-provider.h: s/GString/gchar/g
	+ typo fix.

	* camel/camel-provider.[ch]:
	basic provider structure. Have to write the
	code for dynamic loading.

1999-04-24  bertrand <Bertrand.Guiheneuf@aful.org>
	
	* camel/url-util.[ch]: s/new_g_url/g_url_new

	* camel/url-util.c (new_g_url): URL 
	rewritten completely. Error handling not
	implemented in public functions.
	But URL scan works pretty well :)))

1999-04-24 bertrand <Bertrand.Guiheneuf@aful.org>
	
	* camel/url-util.[ch]: I needed the url 
	functions to use GString, and I wanted a more
	general scheme so I finally started rewriting 
	the whole thing from scratch.
	No more code from gzilla :(
	
1999-04-23  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/url-util.[ch]:
	Utility functions to parse URLs.
	Stolen shamelessly from gzilla (www.gzilla.com)
	written by Raph Levien <raph@acm.org>
	
	* camel/Makefile.am: added url-util.[ch]
	compilation.

	* Makefile.am (SUBDIRS): removed devel-docs
	until I come up with a correct Makefile.am

	* camel/camel-store.h: 
	* camel/camel-folder.h:
	correct declarations of structs


1999-04-22  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/providers/MH/camel-mh-store.c:
	more test implementation.

	* camel/camel-store.c (camel_store_get_type): typo fix
	

1999-04-21  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/providers/MH/camel-mh-folder.c (camel_mh_folder_get_type): 
	start test provider.

1999-04-20  bertrand <Bertrand.Guiheneuf@aful.org>
	
	* camel/camel-store.h: now CamelStore inherits from
	CamelService.

	* camel/camel-service.c (camel_service_class_init): 
	basic abstract service class.

1999-04-19  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/README: added some (few) explanations.

1999-04-18  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-store.[ch]: started implementation
	* camel/camel-folder.c (camel_folder_get_type): typo
	uncommented the store related code.
	(camel_folder_create): enable som store relted code. 
	Not finished. Have to define public methods first.

	* camel/camel-log.h: some explanation about the 
	log system

1999-04-18   bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-folder.c: 
	(camel_folder_create): implemented (partially)
	have to write CamelStore before finishing it.

	* camel/camel-folder.h (CamelFolder): added full_name field
	(CamelFolderClass): added set/get_full_name methods

1999-04-18  bertrand <Bertrand.Guiheneuf@aful.org>

	* camel/camel-folder.c: some work
	* camel/camel-log.c: log system for camel
	* camel/gstring-util.c: some utilities for GString objects
	

1999-04-18  bertrand <Bertrand.Guiheneuf@aful.org>

	* autogen.sh (PKG_NAME): groomf -> gnome-mailer

