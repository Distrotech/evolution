/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
/*
 *
 * Author:
 *   Nat Friedman (nat@ximian.com)
 *
 * Copyright 2000, Ximian, Inc.
 */

#include <Bonobo.idl>

module GNOME {
module Evolution {
module Addressbook {
	typedef long RequestId;
	typedef string CardId;
	typedef string VCard;
	typedef sequence<VCard> VCardList;
	typedef sequence<CardId> CardIdList;
	typedef sequence<string> stringlist;

	/* 
	 * A book view is a live view of a book.  It's either a view
	 * of all the cards in the book or a view of a query.  When
	 * created, it will get a series of signal_card_added calls
	 * for all objects in the initial set.  After that, it will
	 * get added, removed, or changed signals whenever the book
	 * changes (if it affects the set of viewed cards.)
	 */
	interface BookViewListener : Bonobo::Unknown {
		enum CallStatus {
			Success,
			/* These are still successful searches, but
			   the result set was truncated */
			SearchSizeLimitExceeded,
			SearchTimeLimitExceeded,

			/* These are failures */
			InvalidQuery,
			QueryRefused,
			OtherError
		};
		oneway void notifyCardAdded        (in VCardList cards);
		oneway void notifyCardsRemoved     (in CardIdList ids);
		oneway void notifyCardChanged      (in VCardList cards);
		oneway void notifySequenceComplete (in CallStatus status);
		oneway void notifyProgress         (in string message, in short percent);
	};
	
	interface BookView : Bonobo::Unknown {
	};

	interface Book : Bonobo::Unknown {

		/*
		 * Fetching cards in the addresbook.
		 */
		RequestId getVCard (in CardId id);

		RequestId authenticateUser (in string user, in string passwd,
					    in string authMethod);

		/*
		 * Adding and deleting cards in the book.
		 */
		RequestId addCard    (in VCard vcard);
		RequestId removeCards (in CardIdList Id);
	        
		/*
		 * Modifying cards in the addressbook.
		 */
		RequestId modifyCard (in VCard vcard);
		
		/*
		 * These two functions return a book view to the book
		 * listener.  This is for people who want a live view
		 * of the addressbook.
		 */
		RequestId getBookView (in BookViewListener listener, in string query,
				       in stringlist requested_fields, in long max_results);

		RequestId getChanges  (in BookViewListener listener, in string change_id);

		RequestId getCardList (in string query);

		RequestId getSupportedFields ();

		/*
		 * This function returns a list of strings
		 * representing the auth methods (e.g. SASL mechs)
		 * that a backend/server supports.
		 *
		 * Some examples are:
		 *
		 * "ldap/simple-email|By email Address"
		 * "sasl/CRAM-MD5|CRAM-MD5(SASL)"
		 *
		 * The format should be:
		 *
		 * <class>/<type>|<i18nized string>
		 *
		 * "i18nized string" is shown in the UI, and should be
		 * a user friendly representation of the auth method.
		 *
		 * in the case of SASL auth mechs, the text trailing
		 * the '/' should be the proper name of the mechanism,
		 * as it will be passed unchanged to the backend auth
		 * function (eg. ldap_sasl_bind)
		 */
		RequestId getSupportedAuthMethods ();

		string getStaticCapabilities ();

		string getName ();

		/* cancels the currently running operation, whatever
		   it is. 

		   XXX the 'long' needs to be a better return code */
		long cancelOperation (in RequestId reqid);
	};

	interface BookListener : Bonobo::Unknown {

		enum CallStatus {
			Success,
			RepositoryOffline,
			PermissionDenied,
			CardNotFound,
			CardIdAlreadyExists,
			AuthenticationFailed,
			AuthenticationRequired,
			UnsupportedField,
			UnsupportedAuthenticationMethod,
			TLSNotAvailable,
			NoSuchBook,

			OtherError
		};

		oneway void notifyCardCreated          (in RequestId reqid, in CallStatus status, in CardId Id);

		oneway void notifyCardsRemoved         (in RequestId reqid, in CallStatus status);

		oneway void notifyCardModified         (in RequestId reqid, in CallStatus status);
		
		oneway void notifyProgress             (in RequestId reqid, in string status_message, in short percent);

		oneway void notifyBookOpened           (in CallStatus status, in Book book);

		oneway void notifyCardRequested        (in RequestId reqid, in CallStatus status, in VCard card);

		oneway void notifyCardListRequested    (in RequestId reqid, in CallStatus status, in stringlist cards);

		oneway void notifyViewRequested        (in RequestId reqid, in CallStatus status, in BookView view);

		oneway void notifyChangesRequested     (in RequestId reqid, in CallStatus status, in BookView view);

		oneway void notifySupportedFields      (in RequestId reqid, in CallStatus status, in stringlist fields);

		oneway void notifyAuthenticationResult (in RequestId reqid, in CallStatus status);

		oneway void notifySupportedAuthMethods (in RequestId reqid, in CallStatus status, in stringlist fields);

		/**
		 * Used to report whether or not a backend can write to a given
		 * addressbook.  All books default to read-only, so unless you
		 * receive a notification saying otherwise, treat the book as
		 * read-only.  It is presumed that this notification will be
		 * sent early (just after a connection is opened, usually), but
		 * it may also be sent later, if/when the backend notices a
		 * change.
		 */
		void notifyWritable (in boolean writable);
	};

	interface BookFactory : Bonobo::Unknown {
		exception ProtocolNotSupported {};

		oneway void openBook (in string uri, in BookListener listener)
			raises (ProtocolNotSupported);
	};
};
};
};
