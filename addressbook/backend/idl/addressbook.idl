/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
/*
 *
 * Author:
 *   Nat Friedman (nat@ximian.com)
 *
 * Copyright 2000, Ximian, Inc.
 */

#include <Bonobo.idl>

module GNOME {
module Evolution {
module Addressbook {
	typedef string CardId;
	typedef string VCard;
	typedef sequence<VCard> VCardList;
	typedef sequence<CardId> CardIdList;
	typedef sequence<string> stringlist;

	/* 
	 * A book view is a live view of a book.  It's either a view
	 * of all the cards in the book or a view of a query.  When
	 * created, it will get a series of signal_card_added calls
	 * for all objects in the initial set.  After that, it will
	 * get added, removed, or changed signals whenever the book
	 * changes (if it affects the set of viewed cards.)
	 */
	interface BookViewListener : Bonobo::Unknown {
		enum CallStatus {
			Success,
			/* These are still successful searches, but
			   the result set was truncated */
			SearchSizeLimitExceeded,
			SearchTimeLimitExceeded,

			/* These are failures */
			InvalidQuery,
			QueryRefused,
			OtherError
		};
		oneway void notifyCardAdded        (in VCardList cards);
		oneway void notifyCardsRemoved     (in CardIdList ids);
		oneway void notifyCardChanged      (in VCardList cards);
		oneway void notifySequenceComplete (in CallStatus status);
		oneway void notifyProgress         (in string message, in short percent);
	};
	
	interface BookView : Bonobo::Unknown {
	};

	enum BookListenerCallStatus {
		Success,
		RepositoryOffline,
		PermissionDenied,
		CardNotFound,
		CardIdAlreadyExists,
		AuthenticationFailed,
		AuthenticationRequired,
		UnsupportedField,
		UnsupportedAuthenticationMethod,
		TLSNotAvailable,
		NoSuchBook,

		OtherError
	};

	interface Book : Bonobo::Unknown {

		/*
		 * Fetching cards in the addresbook.
		 */
		oneway void getVCard (in CardId id);

		oneway void authenticateUser (in string user, in string passwd,
					      in string authMethod);

		/*
		 * Adding and deleting cards in the book.
		 */
		oneway void addCard    (in VCard vcard);
		oneway void removeCards (in CardIdList Id);
	        
		/*
		 * Modifying cards in the addressbook.
		 */
		oneway void modifyCard (in VCard vcard);
		
		/*
		 * These two functions return a book view to the book
		 * listener.  This is for people who want a live view
		 * of the addressbook.
		 */
		oneway void getBookView (in BookViewListener listener, in string query,
					 in stringlist requested_fields, in long max_results);

		oneway void getChanges  (in BookViewListener listener, in string change_id);

		oneway void getCardList (in string query);

		oneway void getSupportedFields ();

		/*
		 * This function returns a list of strings
		 * representing the auth methods (e.g. SASL mechs)
		 * that a backend/server supports.
		 *
		 * Some examples are:
		 *
		 * "ldap/simple-email|By email Address"
		 * "sasl/CRAM-MD5|CRAM-MD5(SASL)"
		 *
		 * The format should be:
		 *
		 * <class>/<type>|<i18nized string>
		 *
		 * "i18nized string" is shown in the UI, and should be
		 * a user friendly representation of the auth method.
		 *
		 * in the case of SASL auth mechs, the text trailing
		 * the '/' should be the proper name of the mechanism,
		 * as it will be passed unchanged to the backend auth
		 * function (eg. ldap_sasl_bind)
		 */
		oneway void getSupportedAuthMethods ();

		string getStaticCapabilities ();

		string getName ();

		/* cancels the currently running operation, whatever
		   it is. */
		BookListenerCallStatus cancelOperation ();
	};

	interface BookListener : Bonobo::Unknown {

		oneway void notifyCardCreated          (in BookListenerCallStatus status, in CardId Id);
		oneway void notifyCardsRemoved         (in BookListenerCallStatus status);
		oneway void notifyCardModified         (in BookListenerCallStatus status);
		oneway void notifyProgress             (in string status_message, in short precent);
		oneway void notifyBookOpened           (in BookListenerCallStatus status, in Book book);
		oneway void notifyCardRequested        (in BookListenerCallStatus status, in VCard card);
		oneway void notifyCardListRequested    (in BookListenerCallStatus status, in stringlist cards);
		oneway void notifyViewRequested        (in BookListenerCallStatus status, in BookView view);
		oneway void notifyChangesRequested     (in BookListenerCallStatus status, in BookView view);
		oneway void notifySupportedFields      (in BookListenerCallStatus status, in stringlist fields);
		oneway void notifyAuthenticationResult (in BookListenerCallStatus status);
		oneway void notifySupportedAuthMethods (in BookListenerCallStatus status, in stringlist auth_methods);

		oneway void notifyWritable (in boolean writable);
	};

	interface BookFactory : Bonobo::Unknown {
		exception ProtocolNotSupported {};

		oneway void openBook (in string uri, in BookListener listener)
			raises (ProtocolNotSupported);
	};
};
};
};
