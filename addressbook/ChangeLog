2003-09-02  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-backend-card-sexp.[ch]
	(pas_backend_card_sexp_match_contact): rename
	pas_backend_card_sexp_match_card, and it takes an EContact now.
	Also, port this file to use EContact instead of ECard, and ifdef
	out lots of stuff.

	* backend/pas/pas-backend-ldap.c: convert this to use EContact
	instead of ECard, and ifdef great swaths of code to make it
	compile.

	* backend/pas/pas-book.c (pas_book_respond_modify): convert this
	from ECard to EContact.

2003-09-02  Chris Toshok  <toshok@ximian.com>

	* gui/widgets/Makefile.am (libeminicard_la_SOURCES): remove all
	the reflow/minicard stuff from the build.
	(e-addressbook-marshal.[ch]): change the prefix on the marshallers to
	eab_marshal.

	* gui/widgets/e-addressbook-view.etspec: bring this more in line
	with the field ids for EContact, and comment out a ton of them
	that aren't there yet.

	* gui/widgets/e-addressbook-view.[ch]: big renaming - rename
	e_addressbook_view to eab_view, and EAddressbookView to EABView.

	* gui/widgets/e-addressbook-util.c (eab_error_dialog): rename, and
	change a few of the error strings s/Card/Contact.
	(added_cb): E_BOOK_STATUS_SUCCESS => E_BOOK_ERROR_OK.
	(modified_cb): same.
	(e_addressbook_show_contact_editor): this takes an EContact now,
	and track the change to the contact editor signal names.
	(e_addressbook_show_contact_list_editor): this takes an EContact
	now.
	(view_contacts): rename view_cards to this, and ifdef the body.
	(e_addressbook_show_multiple_contacts): rename
	e_addressbook_show_multiple_cards to this, and s/card/contact.

	* gui/widgets/e-addressbook-util.h: ifdef some things out, and
	rename e_addressbook_error_dialog to eab_error_dialog.

	* gui/widgets/e-addressbook-table-adapter.[ch]: big renaming -
	rename e_addressbook_table_adapter to eab_table_adapter, and
	EAddressbookTableAdapter to EABTableAdapter.  Also, remove the
	simple mapping - we can do ECardSimple-like operations directly on
	the EContacts from the EABModel.

	* gui/widgets/e-addressbook-model.[ch]: big renaming - rename
	e_addressbook_model to eab_model, and EAddressbookModel to
	EABModel.  Also, convert everything from ECard to EContact.

2003-09-01  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-vcard.c (e_vcard_new_from_string): omg i'm dumb.
	don't call e_vcard_new here since it just turns around and calls
	e_vcard_new_from_string again.

2003-09-01  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-book-view.c (pas_book_view_notify_change): guard
	pending adds foo.
	(pas_book_view_notify_remove): same.
	(pas_book_view_notify_add): same.
	(pas_book_view_notify_complete): same.
	(pas_book_view_construct): init mutex
	(pas_book_view_dispose): free mutex

	* backend/pas/pas-backend-ldap.c (func_exists): new function.
	(send_pending_adds): remove
	(ldap_search_handler): let the BookView stuff handle the pending
	adds for us.
	(ldap_search_dtor): remove pending adds stuff.
	(pas_backend_ldap_search): same

	* backend/pas/pas-backend-card-sexp.c (func_exists): new function.
	
	* backend/ebook/tests/ebook/test-ebook.c (print_all_emails): use
	an exists query.

2003-08-31  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book-query.c (func_and, func_or, func_not)
	(func_contains, func_is, func_beginswith, func_endswith)
	(e_book_query_from_string): adapt the pas ldap backend sexp
	parsing code to this, build up an EBookQuery that represents the
	sexp.

	* backend/ebook/e-contact.h (e_contact_field_id): add prototype.

	* backend/ebook/e-contact.c (e_contact_field_id): new function.

	* backend/ebook/Makefile.am (libebook_la_SOURCES): add
	e-book-util.c back into the build, if only for the config_database
	thingy.

2003-08-31  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-contact.c (e_contact_duplicate): new function.

	* backend/ebook/e-contact.h: add prototype for
	e_contact_duplicate.

	* backend/ebook/e-book-util.[ch]: massive ifdeffing.  most of this
	is either gone or will be unnecessary soon.

	* backend/ebook/e-book-query.c (e_book_query_from_string): hack
	this so it'll at least generate a query.

	* backend/ebook/e-book-listener.c
	(impl_BookListener_respond_get_view): add some debug spew and
	remove a c&p'ed comment.

	* backend/ebook/e-book-async.h: add prototype for
	e_book_async_unload_uri.

	* backend/ebook/e-book-async.c (e_book_async_unload_uri): new
	function.

	* backend/pas/pas-book-view.c (pas_book_view_construct): switch to
	CORBA_Object_duplicate, ala pas_book.

	* backend/pas/pas-backend-sync.c (pas_backend_sync_class_init):
	fix typo and the build.

2003-08-29  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-backend-ldap.c (ldap_error_to_response):
	s/card/contact.
	(pas_backend_ldap_process_create_contact): same.
	(remove_contact_handler): same.
	(remove_contact_dtor): same.
	(pas_backend_ldap_process_remove_contacts): same.
	(modify_contact_modify_handler): same.
	(modify_contact_dtor): same.
	(pas_backend_ldap_process_modify_contact): same.
	(get_contact_handler): same.
	(get_contact_dtor): same.
	(pas_backend_ldap_process_get_contact): same.
	(pas_backend_ldap_class_init): same.

	* backend/pas/pas-backend-summary.c
	(pas_backend_summary_add_contact): s/card/contact, and mostly
	switch from ECard{Simple} to EContact.
	(pas_backend_summary_get_summary_vcard): same.
	(pas_backend_summary_remove_contact): s/card/contact

	* backend/pas/pas-backend-summary.h: s/card/contact.

	* backend/pas/pas-backend-file.c (build_summary): fix g_warning,
	and return immediately if the db->cursor call fails.
	(pas_backend_file_create_contact): s/card/contact
	(pas_backend_file_remove_contacts): same.
	(pas_backend_file_modify_contact): same.
	(pas_backend_file_get_contact): same.
	(pas_backend_file_get_contact_list): same.
	(pas_backend_file_class_init): same.

	* backend/pas/pas-backend-vcf.c
	(pas_backend_vcf_process_create_contact): s/card/contact.
	(pas_backend_vcf_process_remove_contacts): same.
	(pas_backend_vcf_process_modify_contact): same.
	(pas_backend_vcf_process_get_contact): same.
	(pas_backend_vcf_process_get_contact_list): same.
	(pas_backend_vcf_class_init): same.

	* backend/pas/pas-backend-sync.c (pas_backend_sync_create_contact): s/card/contact.
	(pas_backend_sync_remove_contacts): same.
	(pas_backend_sync_modify_contact): same.
	(pas_backend_sync_get_contact): same.
	(pas_backend_sync_get_contact_list): same.
	(_pas_backend_create_contact): same.
	(_pas_backend_remove_contacts): same.
	(_pas_backend_modify_contact): same.
	(_pas_backend_get_contact): same.
	(_pas_backend_get_contact_list): same.
	(pas_backend_sync_class_init): same.

	* backend/pas/pas-backend-sync.h: s/card/contact.

	* backend/pas/pas-backend.c (pas_backend_create_contact): s/card/contact.
	(pas_backend_remove_contacts): same.
	(pas_backend_modify_contact): same.
	(pas_backend_get_contact): same.
	(pas_backend_get_contact_list): same.
	(pas_backend_change_add_new): same.
	(pas_backend_change_modify_new): same.
	(pas_backend_change_delete_new): same.

	* backend/pas/pas-backend.h: s/card/contact.

	* backend/pas/pas-book-view.c (send_pending_adds): s/card/contact
	(pas_book_view_notify_change): same.
	(pas_book_view_notify_remove): same.

	* backend/pas/pas-book.c
	(impl_GNOME_Evolution_Addressbook_Book_getContact): s/card/contact
	(impl_GNOME_Evolution_Addressbook_Book_getContactList): same.
	(impl_GNOME_Evolution_Addressbook_Book_addContact): same.
	(impl_GNOME_Evolution_Addressbook_Book_removeContacts): same.
	(impl_GNOME_Evolution_Addressbook_Book_modifyContact): same.
	(pas_book_respond_create): same.
	(pas_book_respond_remove_contacts): same.
	(pas_book_respond_modify): same.
	(pas_book_respond_get_contact): same.
	(pas_book_respond_get_contact_list): same.
	(pas_book_respond_get_changes): same.
	(pas_book_class_init): same.

	* backend/pas/pas-book.h: s/card/contact

	* backend/ebook/tests/vcard/dump-vcard.c: #include
	"ebook/e-vcard.h"

	* backend/ebook/tests/vcard/Makefile.am (TEST_LIBS): use
	top_builddir.
	(CFLAGS): same.

	* backend/ebook/tests/ebook/Makefile.am (TEST_LIBS): use
	top_builddir.
	(CFLAGS): use srcdir

	* backend/ebook/test-card.c, backend/ebook/test-client-list.c,
	backend/ebook/test-client.c, backend/ebook/test-ebook.c: remove.
	
	* backend/ebook/e-card-cursor.[ch]: remove.

	* backend/ebook/e-card-pairs.h: remove.
	
	* backend/ebook/e-book.c (e_book_add_contact): s/Card/Contact.
	(e_book_commit_contact): same
	(e_book_get_contact): same.
	(e_book_remove_contacts): same.
	(e_book_get_contacts): same.
	(e_book_handle_response): same.

	* backend/ebook/e-book-view.c (e_book_view_do_added_event):
	s/card/contact
	(e_book_view_do_modified_event): same.
	(e_book_view_do_removed_event): same.
	(e_book_view_handle_response): same.
	(e_book_view_class_init): same.

	* backend/ebook/e-book-view.h: s/card/contact and pad the class
	struct.

	* backend/ebook/e-book-view-listener.c
	(e_book_view_listener_queue_response): s/Card/Contact.
	(e_book_view_listener_queue_status_event): no need to assign
	things to NULL, we g_new0.
	(e_book_view_listener_queue_idlist_event): s/Card/Contact, and no
	need to assign things to NULL, we g_new0.
	(e_book_view_listener_queue_sequence_event): same.
	(e_book_view_listener_queue_message_event): same.
	(impl_BookViewListener_notify_contacts_added): s/Card/Contact.
	(impl_BookViewListener_notify_contacts_removed): same.
	(impl_BookViewListener_notify_contacts_changed): same.
	(e_book_view_listener_class_init): same.

	* backend/ebook/e-book-view-listener.h: s/Card/Contact

	* backend/ebook/e-book-types.h: s/CARD/CONTACT

	* backend/ebook/e-book-listener.c
	(e_book_listener_convert_status): s/Card/Contact
	(impl_BookListener_respond_create_contact): same.
	(impl_BookListener_respond_remove_contacts): same.
	(impl_BookListener_respond_modify_contact): same.
	(impl_BookListener_respond_get_contact): same.
	(impl_BookListener_respond_get_contact_list): same.
	(impl_BookListener_respond_get_changes): same.
	(e_book_listener_class_init): same.

	* backend/ebook/e-book-listener.h: pad the class struct, and
	s/Card/Contact.

	* backend/ebook/e-book-async.c (_load_uri_handler): GError
	changes.
	(_get_fields_handler): same.
	(_get_methods_handler): same.
	(_auth_user_handler): same.
	(_get_card_handler): same.
	(_remove_cards_handler): same.
	(_add_vcard_handler): same.
	(_commit_vcard_handler): same.
	(_get_book_view_handler): same.
	(e_book_async_get_book_view): use an EBookQuery instead of a char*.

	* backend/ebook/Makefile.am: remove the test handling.
	(SUBDIRS): set to ". tests"
	(libebook_la_SOURCES): add e-book-async.c

	* backend/idl/addressbook.idl: possibly gratuitous renaming, but i
	was sick of seeing "Card" being used everywhere.  "Contact" is the
	new "Card".

2003-08-28  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book.c (e_book_op_free): rename from
	e_book_free_op.
	(e_book_op_remove): rename from e_book_remove_op.
	(e_book_clear_op): new function, remove the op, unlock its mutex,
	and free it.
	(e_book_add_contact): use e_book_clear_op.
	(e_book_commit_contact): same.
	(e_book_get_supported_fields): same.
	(e_book_get_supported_auth_methods): same.
	(e_book_authenticate_user): same.
	(e_book_get_contact): same.
	(e_book_remove_contacts): same.
	(e_book_get_book_view): same.
	(e_book_get_contacts): same.
	(e_book_get_changes): same.
	(e_book_load_uri): same.
	(e_book_remove): new function.
	(e_book_response_remove): new function.
	(e_book_handle_response): add handling for RemoveBookResponse.
	(e_book_load_local_addressbook): pass TRUE for e_book_load_uri
	@only_if_exists.

	* backend/ebook/e-book.h: add @only_if_exists arg to
	e_book_load_uri so we can support folder creation at load_uri
	time, and add prototype for e_book_remove.

	* backend/ebook/e-book-types.h: add an "id" slot in EBookChange.

	* backend/ebook/e-book-listener.c
	(impl_BookListener_respond_get_changes): handle union in idl.
	(impl_BookListener_respond_open_book): remove unnecessary
	exception check.
	(impl_BookListener_respond_remove_book): new function.
	(impl_BookListener_respond_get_supported_fields): rename this from
	_response_.
	(impl_BookListener_respond_get_supported_auth_methods): same.
	(e_book_listener_class_init): add _remove_book and track change to
	get_supported_fields/get_supported_auth_methods names.

	* backend/ebook/e-book-listener.h: add RemoveBookResponse to
	EBookListenerOperation enum.

	* backend/idl/addressbook.idl: make BookChangeItem a union that
	switches over BookChangeType.

	* backend/pas/pas-backend.c (pas_backend_change_add_new): new
	function, create a BookChangeItem representing the addition of a
	contact.
	(pas_backend_change_modify_new): same, but for modifications.
	(pas_backend_change_delete_new): same, but for deletions.

	* backend/pas/pas-backend.h: add prototypes for
	pas_backend_change_{add,modify,delete}_new

	* backend/pas/pas-backend-file.c (pas_backend_file_changes): nuke.
	(do_create): fix memory corruption.
	(pas_backend_file_get_changes): copy the body of
	pas_backend_file_changes here, and rework so that it's synchronous
	and return a list instead of the book view hack.
	(pas_backend_file_load_uri): mkdir the directory (we need a mkdir
	-p here).
	(select_changes): new function, scandir helper.
	(pas_backend_file_remove): NULL out bf->priv->summary to quiet
	valgrind, and call scandir to accumulate the .changes.db files
	then unlink them.

	* backend/pas/pas-book.c (pas_book_respond_remove): new function.
	(pas_book_respond_get_supported_fields): unifdef this, and make it
	use a glist.
	(pas_book_respond_get_supported_auth_methods): same.
	(pas_book_respond_get_changes): this code is kinda gross... lots
	of copying going on, there's got to be a better way.  but it
	works.

2003-08-26  Chris Toshok  <toshok@ximian.com>

	* backend/idl/addressbook.idl: add oneway void Book::remove() and
	oneway void notifyBookRemoved()

2003-08-26  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-backend.c (pas_backend_remove): new function.
	(pas_backend_add_book_view): new function.
	(pas_backend_add_client): move the "real_add_client" code here.
	(pas_backend_remove_client): move the "real_remove_client" code
	here.
	(pas_backend_class_init): remove assignments of add_client and
	remove_client vtable entries.
	(pas_backend_is_removed): new function.
	(pas_backend_set_is_removed): new function.
	(pas_backend_init): init clients_mutex and views_mutex.

	* backend/pas/pas-backend.h: remove the vtable entries for
	add/remove_client, since these are fully handled in PASBackend.
	Add prototypes for
	pas_backend_is_removed/pas_backend_add_book_view/pas_backend_set_is_removed.

	* backend/pas/pas-book.c
	(impl_GNOME_Evolution_Addressbook_Book_remove): new function.
	(impl_GNOME_Evolution_Addressbook_Book_getBookView): clean things
	up a bit, and don't use pas_backend_get_book_views as it can't
	lock the list of views.
	(pas_book_respond_get_supported_auth_methods): remove the extra
	unnecessary arg from the corba call.
	(pas_book_respond_get_changes): same.
	(pas_book_class_init): fill in epv "remove" slot.

	* backend/pas/pas-book.h: rename pas_book_respond_remove to
	pas_book_respond_remove_cards, and add a new
	pas_book_respond_remove for use with removing books.

	* backend/pas/pas-backend-sync.c (pas_backend_sync_remove): new
	function.
	(_pas_backend_remove): new function.
	(pas_backend_sync_class_init): fill in the "remove" vtable entry.
	(_pas_backend_remove_cards): track change to
	pas_book_respond_remove_cards (pas_book_respond_remove is used for
	removing the book, not the cards.)

	* backend/pas/pas-backend-sync.h: add pas_backend_sync_remove
	prototype and add remove_sync virtual function.

2003-08-26  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-backend-file.c (pas_backend_file_create_card,
	pas_backend_file_remove_cards, pas_backend_file_modify_card,
	pas_backend_file_get_vcard, pas_backend_file_get_card_list,
	pas_backend_file_start_book_view, pas_backend_file_get_changes,
	pas_backend_file_authenticate_user,
	pas_backend_file_get_supported_fields): rename from
	pas_backend_file_process_*
	(pas_backend_file_load_uri): save off the dirname/summary
	filename.
	(pas_backend_file_remove): new function, unlink all the files we
	know about.
	(pas_backend_file_class_init): track changes to functions, and add
	pas_backend_file_remove.

2003-08-22  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-book.[ch]: switch from using the PASRequest
	union and a central PASBackend dispatch function.  just call the
	pas_backend methods directly and expand the args out.

	* backend/pas/pas-backend.[ch]: same.
	
	* backend/pas/pas-backend-sync.[ch]: same.

	* backend/pas/pas-backend-vcf.c, backend/pas/pas-backend-file.c,
	backend/pas/pas-backend-ldap.c: same, and get these all compiling
	against the rest of the current pas/ebook code.	

2003-08-21  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/test-ebook.c: track GError case.

	* backend/ebook/e-book.[ch]: GError-ify the api, and clean up some
	cases where we weren't removing the current op.

	* backend/ebook/e-book-view-listener.c
	(e_book_view_listener_convert_status): track change from
	E_BOOK_VIEW_STATUS_* to E_BOOK_VIEW_ERROR_*.

	* backend/ebook/e-book-types.h: track change from E_BOOK_STATUS_*
	to E_BOOK_ERROR_*, and some E_BOOK_VIEW_STATUS_* to
	E_BOOK_VIEW_ERROR_*.

	* backend/ebook/e-book-listener.c
	(e_book_listener_convert_status): track change from
	E_BOOK_STATUS_* to E_BOOK_ERROR_*.

	* backend/ebook/e-book-query.c (e_book_query_any_field_contains):
	new function.
	(e_book_query_unref): handle the any_field_contains case.
	(e_book_query_to_string): same.

	* backend/ebook/e-book-query.h: add prototype for
	e_book_query_any_field_contains.

	* backend/ebook/e-card.c (e_card_load_uri): ifdef this out for
	now.

	* backend/ebook/e-contact.[ch] (e_contact_get_const): new
	function/prototype.

2003-08-07  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-vcard.c (e_vcard_to_string_vcard_21): new,
	unimplemented, function.
	(e_vcard_to_string_vcard_30): move the 3.0 vcard export code here.
	(e_vcard_to_string): call e_vcard_to_string_vcard_21 or
	e_vcard_to_string_vcard_30 based on @format.
	(e_vcard_attribute_remove_values): new function.

	* backend/ebook/e-vcard.h: add @format to e_vcard_to_string, and
	add prototype for e_vcard_attribute_remove_values.  also, add
	prototype for e_vcard_decode_b_encoding.

2003-08-07  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book-listener.c
	(impl_BookListener_respond_open_book): remove the book arg.

	* backend/ebook/e-book-listener.h (struct _EBookListenerResponse):
	remove the corba book.

	* backend/ebook/e-book-async.c (_get_book_view_dtor): free the
	query string.
	(e_book_async_get_book_view): dup the query string.

	* backend/ebook/e-book.h: change e_book_get_book_view and
	e_book_get_contacts to take a const char * query string instead of
	an EBookQuery.

	* backend/ebook/e-book.c (e_book_add_contact): pass
	EVC_FORMAT_VCARD_30 to e_vcard_to_string.
	(e_book_commit_contact): same.
	(e_book_get_book_view): take a const char* query string instead of
	an EBookQuery.
	(e_book_get_contacts): same.
	(e_book_response_open): track change - the Book is no longer
	communicated back here.
	(listener_cb): nuke.
	(e_book_handle_response): track change to e_book_response_open.
	(e_book_load_uri): rework this from using BookFactory::openBook to
	BookFactory::getBook + Book::open.
	(e_book_get_uri): new function, reimplement from old api.
	(e_book_get_static_capabilities): same.
	(e_book_check_static_capability): same.
	(startup_mainloop): new function, run bonobo_main.
	(e_book_activate): start up a thread with startup_mainloop as the
	start func.
	(e_book_new): call e_book_activate.

	* backend/idl/addressbook.idl: Add Book::open, remove the Book
	from notifyBookOpened's args, and change BookFactory::openBook to
	BookFactory::getBook.

	* backend/pas/pas-backend-file.c (pas_backend_file_load_uri): add
	only_if_exists - stop using the "create-initial" special file.

	* backend/pas/pas-backend-vcf.c (pas_backend_vcf_load_uri): add
	only_if_exists - stop using the "create-initial" special file.

	* backend/pas/pas-backend.c (pas_backend_load_uri): add
	@only_if_exists, and pass it along to the virtual method.
	(pas_backend_open): new function, lock the mutex so only one
	PASBook can actually call load_uri.  call load_uri with
	pas_book_get_uri, and req->only_if_exists.
	(pas_backend_handle_request): rename process_client_request to
	this, and expose it publicly.  Also add a case statement for
	"Open".
	(real_add_client): gut this function, we don't need to create the
	book anymore, just add the client to the list and do the weak
	ref/ORBit small stuff.
	(pas_backend_add_client): track change to signature - BookListener
	-> PASBook.
	(pas_backend_init): init open_mutex.
	(pas_backend_dispose): free open_mutex.

	* backend/pas/pas-backend.h (PASBackendClass): add @only_if_exists
	to the load_uri virtual method, and change the add_client virtual
	method to take a PASBook instead of a BookListener.  add the same
	args to _load_uri and add_client.  Also, add prototypes for
	pas_backend_handle_request and pas_backend_open.

	* backend/pas/pas-book-factory.c
	(_pas_book_factory_send_open_book_response): nuke.
	(pas_book_factory_launch_backend): just return NULL, don't call
	_pas_book_factory_send_open_book_response, in the error case.
	(start_backend): nuke
	(impl_GNOME_Evolution_Addressbook_BookFactory_getBook): rename
	_openBook to this.  clean up the code a bit.  Create the PASBook
	here, and always track change to pas_backend_add_client's type (we
	pass the book now, not the listener).
	(pas_book_factory_class_init): openBook -> getBook.

	* backend/pas/pas-book.c
	(impl_GNOME_Evolution_Addressbook_Book_open): new function, call
	pas_backend_open.
	(impl_GNOME_Evolution_Addressbook_Book_getVCard): get rid of the
	signal crap, just call pas_backend_handle_request.
	(impl_GNOME_Evolution_Addressbook_Book_getCardList): same.
	(impl_GNOME_Evolution_Addressbook_Book_authenticateUser): same.
	(impl_GNOME_Evolution_Addressbook_Book_addCard): same.
	(impl_GNOME_Evolution_Addressbook_Book_removeCards): same.
	(impl_GNOME_Evolution_Addressbook_Book_modifyCard): same.
	(impl_GNOME_Evolution_Addressbook_Book_getChanges): same.
	(impl_GNOME_Evolution_Addressbook_Book_getSupportedFields): same.
	(impl_GNOME_Evolution_Addressbook_Book_getSupportedAuthMethods):
	same.
	(impl_GNOME_Evolution_Addressbook_Book_cancelOperation): same.
	(pas_book_get_backend): aggregate some g_return_if_fail's.
	(pas_book_get_listener): new function.
	(pas_book_get_uri): new function.
	(pas_book_respond_open): just call BookListener::notifyBookOpened.
	(pas_book_construct): add @uri, and g_strdup it.
	(pas_book_new): add @uri, and pass it to pas_book_construct.
	(pas_book_class_init): remove the "request" signal stuff, and fill
	in epv->open.

	* backend/pas/pas-book.h: add PASOpenRequest struct/enum entry.
	Also, add @uri to the pas_book_new args, and add a prototype for
	pas_book_get_uri.  Also, remove the "request" signal.

2003-08-07  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-book-factory.c
	(pas_book_factory_get_n_backends): lock map_mutex around hash
	table work.
	(pas_book_factory_dump_active_backends): same.
	(backend_last_client_gone_cb): same.
	(_pas_book_factory_send_open_book_response): track CallStatus idl
	change.
	(start_backend): simplify this greatly, since the factory is
	tagged with HINT_PER_THREAD.
	(impl_GNOME_Evolution_Addressbook_BookFactory_openBook): lock
	around hash table.
	(pas_book_factory_init): initialize map_mutex.
	(pas_book_factory_dispose): free map_mutex.

2003-08-06  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-backend-file.c
	(pas_backend_file_book_view_copy): nuke.
	(pas_backend_file_book_view_free): same.
	(view_destroy): same.
	(pas_backend_file_changes): #if notyet
	(do_create): e-card -> e-contact.
	(pas_backend_file_process_create_card): remove view handling from
	here.
	(pas_backend_file_process_remove_cards): same.
	(pas_backend_file_process_modify_card): convert to e-contact, and
	remove view handling.
	(pas_backend_file_get_book_view): nuke.
	(pas_backend_file_process_get_supported_fields): e-card-simple ->
	e-contact.
	(pas_backend_file_upgrade_db): e-card -> e-contact.
	(pas_backend_file_cancel_operation): implement, just return
	CouldNotCancel.
	(pas_backend_file_class_init): assign cancel_operation, and remove
	get_book_view assignment.
	(pas_backend_file_init): remove book_views assignment.

2003-08-06  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-backend-vcf.c (pas_backend_vcf_book_view_copy):
	nuke.
	(pas_backend_vcf_book_view_free): same.
	(view_destroy): same.
	(insert_contact): new function, insert the contact into our hash
	table.
	(load_file): reimplement without the e_card stuff.
	(foreach_build_list): e_card -> e_contact.
	(save_file): mostly reimplement in terms of e-contact.  more error
	case work needs doing.
	(do_create): e-card -> e-contact.
	(pas_backend_vcf_process_create_card): remove the view handling
	from here.
	(pas_backend_vcf_process_remove_cards): implement this, just
	remove it from the hash table and set ourselves to dirty.
	(pas_backend_vcf_process_modify_card): remove the view handling
	from here.
	(pas_backend_vcf_process_get_book_view): nuke.
	(pas_backend_vcf_process_get_supported_fields): reimplement in
	terms of e-contact.
	(INITIAL_VCARD): add in a FN attribute, and remove the quoted
	printable encoding.
	(pas_backend_vcf_cancel_operation): implement, just always return
	CouldNotCancel.
	(pas_backend_vcf_class_init): fill in cancel_operation, and remove
	get_book_view_sync.
	(pas_backend_vcf_init): remove book_views handling.

	* backend/pas/pas-backend-vcf.h: update copyright.

2003-08-06  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-backend-sync.c (pas_backend_sync_remove_cards):
	add out param @ids, so we can call pas_book_respond_remove
	properly.
	(_pas_backend_remove_cards): the other half of the change - pass
	the ids on to pas_book_response_remove.
	(pas_backend_sync_modify_card): add out param @old_vcard so we can
	call pas_book_respond_modify properly.
	(_pas_backend_modify_card): the other half of the change, pass the
	old_vcard on to pas_book_respond_modify.
	(pas_backend_sync_get_book_view): nuke.
	(pas_backend_sync_get_changes): track change (book view -> GList)
	(_pas_backend_is_threaded): nuke.
	(_pas_backend_create_card): indent.
	(_pas_backend_remove_cards): same.
	(_pas_backend_modify_card): same.
	(_pas_backend_get_card_list): same.
	(_pas_backend_get_changes): same.
	(_pas_backend_authenticate_user): same.
	(_pas_backend_get_supported_fields): same.
	(_pas_backend_get_supported_auth_methods): same.
	(_pas_backend_get_book_view): nuke.
	(pas_backend_sync_class_init): remove assignment to is_threaded
	and get_book_view.

	* backend/pas/pas-backend-sync.h: add out-params @ids to
	remove_cards_sync, @old_vcard to modify_card_sync.
	get_changes_sync's out-param is a GList instead of a book view,
	and remove get_book_view_sync.

	* backend/pas/pas-backend.c (pas_backend_get_book_view): nuke.
	(pas_backend_is_threaded): nuke.
	(pas_backend_start_threaded): nuke.
	(pas_backend_init): initialize priv->views.
	(pas_backend_dispose): free priv->views.
	(pas_backend_get_book_views): new function, return priv->views.

	* backend/pas/pas-backend.h: remove the get_book_view virtual
	method, and the pas_backend_get_book_view prototype.  Also, track
	the CallStatus change, and add a cancel_operation virtual method
	and prototype, and add pas_backend_get_book_views function, so the
	PASBook's can get ahold of the list.

	* backend/pas/pas-book-view.h: track collapsing of
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.

	* backend/pas/pas-book-view.c: same.
	
	* backend/pas/pas-card-cursor.[ch]: nuke
	
	* backend/pas/pas-book.c: track collapsing of
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.
	(impl_GNOME_Evolution_Addressbook_Book_getBookView): implement
	this all here, instead of farming it out to the backends.
	(impl_GNOME_Evolution_Addressbook_Book_getChanges): track change
	to signature.  this is no longer a book view, it'll return an
	actual list.
	(impl_GNOME_Evolution_Addressbook_Book_cancelOperation): new
	function, implement.
	(pas_book_respond_create): iterate over the views, notifying them
	if the new card matches their query.
	(pas_book_respond_remove): iterate over the views, telling them to
	delete the card matching the id.
	(pas_book_respond_modify): iterate over the views, notifying them
	if they need to change/add/remove that card.
	(view_destroy): move this here from the backends.
	(pas_book_respond_get_book_view): weak-ref the book view.
	(pas_book_new): remove the is_threaded switch on POA hints, and
	always use PER_REQUEST.
	(pas_book_class_init): fill in cancelOperation.

	* backend/pas/pas-book.h: track collapsing of
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.

2003-08-01  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book-async.c: mostly finished.

2003-08-01  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book-async.[ch]: new files, create async methods
	similar to the old ebook api that use GThread/GAsyncQueue to
	simulate the old async behavior.

2003-07-29  Chris Toshok  <toshok@ximian.com>

	* backend/idl/addressbook.idl: collapse
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.

2003-07-29  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book-types.h: add EBookChangeType/EBookChange.

2003-07-29  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book-view-listener.c: track collapsing of
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.

	* backend/ebook/e-book-listener.c track collapsing of
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.
	(response_free): nuked
	(e_book_listener_check_queue): nuked
	(e_book_listener_queue_response): nuked
	(e_book_listener_queue_progress): nuked
	(e_book_listener_queue_get_view_response): nuked
	(e_book_listener_queue_get_changes_response): nuked
	(e_book_listener_queue_writable_status): nuked
	(e_book_listener_queue_authentication_response): nuked
	(e_book_listener_queue_get_supported_fields_response): nuked
	(e_book_listener_queue_get_supported_auth_methods_response): nuked
	(e_book_listener_dispose): nuked
	
	* backend/ebook/e-book-listener.h: remove prototypes for
	check_pending and pop_response.

	* backend/ebook/e-book.c (e_book_get_changes): new function.
	implement this as more of a getCardList type function, instead of
	getBookView.
	(e_book_response_get_changes): new function.
	(e_book_free_change_list): new function.

	* backend/ebook/e-book.h: add prototype for
	e_book_free_change_list.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book.c (e_book_get_book_view): new function,
	implement this.
	(e_book_response_get_book_view): same.
	(e_book_get_contacts): remove the op so we don't see BUSY after
	this request.
	(e_book_handle_response): unifdef a few things.
	(e_book_unload_uri): fix the assertion about URI_NOT_LOADED, and
	unifdef some code.
	(e_book_dispose): fix a typo.

	* backend/ebook/e-book-view.c (e_book_view_handle_response):
	rename _check_listener_queue to this.  we don't need to pop the
	response either, it's passed as an arg.
	(e_book_view_construct): "response_queued" -> "response"
	(e_book_view_start): new function, call BookView.start.
	(e_book_view_dispose): track the signal id change.

	* backend/ebook/e-book-view.h: add prototype for
	e_book_view_start.

	* backend/ebook/e-book-view-listener.c
	(e_book_view_listener_check_queue): remove.
	(e_book_view_listener_queue_response): just emit the signal.
	(impl_BookViewListener_notify_card_added): spew.
	(impl_BookViewListener_notify_card_changed): spew.
	(impl_BookViewListener_notify_sequence_complete): spew.
	(impl_BookViewListener_notify_progress): spew.
	(e_book_view_listener_check_pending): remove
	(e_book_view_listener_check_pop_response): remove
	(e_book_view_listener_new): use the ALL_AT_IDLE poa policy.
	(e_book_view_listener_init): remove the queue/timeout stuff.
	(e_book_view_listener_dispose): remove the queue/timeout stuff.

	* backend/ebook/e-book-view-listener.h: remove _check_pending and
	_pop_response.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-backend-file.c (do_summary_query): remove the
	completion_search argument, and remove the aggregating stuff.
	just call pas_book_view_notify_add_1.
	(pas_backend_file_book_view_copy): remove card_sexp crap.
	(pas_backend_file_book_view_free): same.
	(get_length): remove
	(get_nth): remove
	(cursor_destroy): remove
	(vcard_matches_search): remove
	(ecard_matches_search): remove
	(pas_backend_file_search_timeout): remove the aggregating stuff.
	just call pas_book_view_notify_add_1.
	(pas_backend_file_search): simplify this a bunch.
	(do_create): use pas_book_view_vcard_matches.
	(pas_backend_file_process_get_card_list): add some more error
	checks.
	(pas_backend_file_process_get_book_view): unifdef this, and
	implement it.
	(pas_backend_file_start_book_view): kick off the search.
	(pas_backend_file_get_uri): remove.
	(pas_backend_file_class_init): remove get_uri, add
	start_book_view.

	* backend/pas/pas-backend-ldap.c (view_destroy): don't need to
	unref the card_sexp, as the PASBookView owns it now.
	(create_card_handler): use pas_book_view_vcard_matches.
	(modify_card_modify_handler): same.
	(ldap_get_view): initialize the view properly.
	(pas_backend_ldap_get_uri): remove.
	(pas_backend_ldap_class_init): remove the get_uri assignment.

	* backend/pas/pas-backend-sync.c (_pas_backend_get_card_list):
	don't free this, it's freed in the pas_book code.

	* backend/pas/pas-backend-sync.h: make use of pas-types.h and
	remove some typedefs.

	* backend/pas/pas-backend-summary.h: same.

	* backend/pas/pas-backend-card-sexp.h: same.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-book.c
	(impl_GNOME_Evolution_Addressbook_Book_getBookView): spew.
	(pas_book_respond_create): unifdef this.
	(pas_book_respond_remove): same.
	(pas_book_respond_modify): same.
	(pas_book_respond_authenticate_user): same.
	(pas_book_respond_get_supported_fields): unref the iterator.
	(pas_book_respond_get_book_view): unifdef, and add spew.

	* backend/pas/pas-book.h: make use of pas-types.h and remove some
	typedefs.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-types.h: new file, all the typedefs shared
	between files here.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-book-view.c (send_pending_adds): abstract all
	the aggregating code to the book view.  backends just call
	notify_card_added and the superclass does all the aggregating.
	(pas_book_view_notify_change): if there are pending adds, send
	them before we send the change.
	(pas_book_view_notify_remove): same.
	(pas_book_view_notify_add): the other part of the aggregating
	code.
	(pas_book_view_notify_complete): send pending adds if there are
	any.
	(impl_GNOME_Evolution_Addressbook_BookView_start): new function,
	call pas_backend_start_book_view.
	(pas_book_view_get_card_query): new function.
	(pas_book_view_get_card_sexp): new function.
	(pas_book_view_get_backend): new function.

	* backend/pas/pas-book-view.h: add a PASBackend arg to the
	constructor, as well as the char* query and PASBackendCardSExp
	form.  also add accessors for card_query, card_sexp, and backend.

	* backend/idl/addressbook.idl
	(GNOME::Evolution::Addressbook::BookView): add start() method.
	(GNOME::Evolution::Addressbook::BookListener): remove the oneway
	tag from notifyBookOpened, notifyViewRequested, and
	notifyChangesRequested so the call doesn't return until the remote
	object has gotten the method call.

	* backend/pas/pas-backend.c (pas_backend_load_uri): fill in the
	uri slot if the load was successful.
	(pas_backend_get_uri): return the uri, remove the virtual method
	call.
	(pas_backend_start_book_view): new function.
	(process_client_request): ifdef out the threaded foo, since i'm
	not certain it's at all necessary.
	(real_add_client): remove the bonobo_object_unref of the book,
	since it's immortal.
	(pas_backend_dispose): free the uri.

	* backend/pas/pas-backend.h: remove the get_uri virtual method,
	and add the start_book_view virtual method and
	pas_backend_start_book_view prototype.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/pas/Makefile.am (libpasvcf_a_SOURCES): new.
	(noinst_LIBRARIES): add libpasvcf.a

	* backend/pas/pas-backend-vcf.[ch]: new files, implement a vcard
	file backend.  the backend api still needs a little work, but it's
	getting easier to write backends.

2003-06-05  Not Zed  <NotZed@Ximian.com>

	** For #42691.

	* gui/component/select-names/Makefile.am (%.server.in): implicit
	rule for .in file.
	(BUILT_SOURCES): added server_DATA.

	* gui/component/Makefile.am (%.server.in): use implicit rule for
	.in file.
	(BUILT_SOURCES): added, just server_DATA.
	(CLEANFILES): added

	* backend/ebook/Makefile.am (BUILT_SOURCES): add server_DATA.

2003-06-04  Rodrigo Moya <rodrigo@ximian.com>

 	* backend/ebook/ebook.c (e_book_do_response_open): adapted to
 	changes in EComponentListener API.

** See ChangeLog.pre-1-4 for older changes

