2003-08-06  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-backend-sync.c (pas_backend_sync_remove_cards):
	add out param @ids, so we can call pas_book_respond_remove
	properly.
	(_pas_backend_remove_cards): the other half of the change - pass
	the ids on to pas_book_response_remove.
	(pas_backend_sync_modify_card): add out param @old_vcard so we can
	call pas_book_respond_modify properly.
	(_pas_backend_modify_card): the other half of the change, pass the
	old_vcard on to pas_book_respond_modify.
	(pas_backend_sync_get_book_view): nuke.
	(pas_backend_sync_get_changes): track change (book view -> GList)
	(_pas_backend_is_threaded): nuke.
	(_pas_backend_create_card): indent.
	(_pas_backend_remove_cards): same.
	(_pas_backend_modify_card): same.
	(_pas_backend_get_card_list): same.
	(_pas_backend_get_changes): same.
	(_pas_backend_authenticate_user): same.
	(_pas_backend_get_supported_fields): same.
	(_pas_backend_get_supported_auth_methods): same.
	(_pas_backend_get_book_view): nuke.
	(pas_backend_sync_class_init): remove assignment to is_threaded
	and get_book_view.

	* backend/pas/pas-backend-sync.h: add out-params @ids to
	remove_cards_sync, @old_vcard to modify_card_sync.
	get_changes_sync's out-param is a GList instead of a book view,
	and remove get_book_view_sync.

	* backend/pas/pas-backend.c (pas_backend_get_book_view): nuke.
	(pas_backend_is_threaded): nuke.
	(pas_backend_start_threaded): nuke.
	(pas_backend_init): initialize priv->views.
	(pas_backend_dispose): free priv->views.
	(pas_backend_get_book_views): new function, return priv->views.

	* backend/pas/pas-backend.h: remove the get_book_view virtual
	method, and the pas_backend_get_book_view prototype.  Also, track
	the CallStatus change, and add a cancel_operation virtual method
	and prototype, and add pas_backend_get_book_views function, so the
	PASBook's can get ahold of the list.

	* backend/pas/pas-book-view.h: track collapsing of
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.

	* backend/pas/pas-book-view.c: same.
	
	* backend/pas/pas-card-cursor.[ch]: nuke
	
	* backend/pas/pas-book.c: track collapsing of
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.
	(impl_GNOME_Evolution_Addressbook_Book_getBookView): implement
	this all here, instead of farming it out to the backends.
	(impl_GNOME_Evolution_Addressbook_Book_getChanges): track change
	to signature.  this is no longer a book view, it'll return an
	actual list.
	(impl_GNOME_Evolution_Addressbook_Book_cancelOperation): new
	function, implement.
	(pas_book_respond_create): iterate over the views, notifying them
	if the new card matches their query.
	(pas_book_respond_remove): iterate over the views, telling them to
	delete the card matching the id.
	(pas_book_respond_modify): iterate over the views, notifying them
	if they need to change/add/remove that card.
	(view_destroy): move this here from the backends.
	(pas_book_respond_get_book_view): weak-ref the book view.
	(pas_book_new): remove the is_threaded switch on POA hints, and
	always use PER_REQUEST.
	(pas_book_class_init): fill in cancelOperation.

	* backend/pas/pas-book.h: track collapsing of
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.

2003-08-01  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book-async.c: mostly finished.

2003-08-01  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book-async.[ch]: new files, create async methods
	similar to the old ebook api that use GThread/GAsyncQueue to
	simulate the old async behavior.

2003-07-29  Chris Toshok  <toshok@ximian.com>

	* backend/idl/addressbook.idl: collapse
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.

2003-07-29  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book-types.h: add EBookChangeType/EBookChange.

2003-07-29  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book-view-listener.c: track collapsing of
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.

	* backend/ebook/e-book-listener.c track collapsing of
	Addressbook::BookListenerCallStatus and
	Addressbook::BookView::CallStatus enums into
	Addressbook::CallStatus.
	(response_free): nuked
	(e_book_listener_check_queue): nuked
	(e_book_listener_queue_response): nuked
	(e_book_listener_queue_progress): nuked
	(e_book_listener_queue_get_view_response): nuked
	(e_book_listener_queue_get_changes_response): nuked
	(e_book_listener_queue_writable_status): nuked
	(e_book_listener_queue_authentication_response): nuked
	(e_book_listener_queue_get_supported_fields_response): nuked
	(e_book_listener_queue_get_supported_auth_methods_response): nuked
	(e_book_listener_dispose): nuked
	
	* backend/ebook/e-book-listener.h: remove prototypes for
	check_pending and pop_response.

	* backend/ebook/e-book.c (e_book_get_changes): new function.
	implement this as more of a getCardList type function, instead of
	getBookView.
	(e_book_response_get_changes): new function.
	(e_book_free_change_list): new function.

	* backend/ebook/e-book.h: add prototype for
	e_book_free_change_list.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/ebook/e-book.c (e_book_get_book_view): new function,
	implement this.
	(e_book_response_get_book_view): same.
	(e_book_get_contacts): remove the op so we don't see BUSY after
	this request.
	(e_book_handle_response): unifdef a few things.
	(e_book_unload_uri): fix the assertion about URI_NOT_LOADED, and
	unifdef some code.
	(e_book_dispose): fix a typo.

	* backend/ebook/e-book-view.c (e_book_view_handle_response):
	rename _check_listener_queue to this.  we don't need to pop the
	response either, it's passed as an arg.
	(e_book_view_construct): "response_queued" -> "response"
	(e_book_view_start): new function, call BookView.start.
	(e_book_view_dispose): track the signal id change.

	* backend/ebook/e-book-view.h: add prototype for
	e_book_view_start.

	* backend/ebook/e-book-view-listener.c
	(e_book_view_listener_check_queue): remove.
	(e_book_view_listener_queue_response): just emit the signal.
	(impl_BookViewListener_notify_card_added): spew.
	(impl_BookViewListener_notify_card_changed): spew.
	(impl_BookViewListener_notify_sequence_complete): spew.
	(impl_BookViewListener_notify_progress): spew.
	(e_book_view_listener_check_pending): remove
	(e_book_view_listener_check_pop_response): remove
	(e_book_view_listener_new): use the ALL_AT_IDLE poa policy.
	(e_book_view_listener_init): remove the queue/timeout stuff.
	(e_book_view_listener_dispose): remove the queue/timeout stuff.

	* backend/ebook/e-book-view-listener.h: remove _check_pending and
	_pop_response.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-backend-file.c (do_summary_query): remove the
	completion_search argument, and remove the aggregating stuff.
	just call pas_book_view_notify_add_1.
	(pas_backend_file_book_view_copy): remove card_sexp crap.
	(pas_backend_file_book_view_free): same.
	(get_length): remove
	(get_nth): remove
	(cursor_destroy): remove
	(vcard_matches_search): remove
	(ecard_matches_search): remove
	(pas_backend_file_search_timeout): remove the aggregating stuff.
	just call pas_book_view_notify_add_1.
	(pas_backend_file_search): simplify this a bunch.
	(do_create): use pas_book_view_vcard_matches.
	(pas_backend_file_process_get_card_list): add some more error
	checks.
	(pas_backend_file_process_get_book_view): unifdef this, and
	implement it.
	(pas_backend_file_start_book_view): kick off the search.
	(pas_backend_file_get_uri): remove.
	(pas_backend_file_class_init): remove get_uri, add
	start_book_view.

	* backend/pas/pas-backend-ldap.c (view_destroy): don't need to
	unref the card_sexp, as the PASBookView owns it now.
	(create_card_handler): use pas_book_view_vcard_matches.
	(modify_card_modify_handler): same.
	(ldap_get_view): initialize the view properly.
	(pas_backend_ldap_get_uri): remove.
	(pas_backend_ldap_class_init): remove the get_uri assignment.

	* backend/pas/pas-backend-sync.c (_pas_backend_get_card_list):
	don't free this, it's freed in the pas_book code.

	* backend/pas/pas-backend-sync.h: make use of pas-types.h and
	remove some typedefs.

	* backend/pas/pas-backend-summary.h: same.

	* backend/pas/pas-backend-card-sexp.h: same.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-book.c
	(impl_GNOME_Evolution_Addressbook_Book_getBookView): spew.
	(pas_book_respond_create): unifdef this.
	(pas_book_respond_remove): same.
	(pas_book_respond_modify): same.
	(pas_book_respond_authenticate_user): same.
	(pas_book_respond_get_supported_fields): unref the iterator.
	(pas_book_respond_get_book_view): unifdef, and add spew.

	* backend/pas/pas-book.h: make use of pas-types.h and remove some
	typedefs.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-types.h: new file, all the typedefs shared
	between files here.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/pas/pas-book-view.c (send_pending_adds): abstract all
	the aggregating code to the book view.  backends just call
	notify_card_added and the superclass does all the aggregating.
	(pas_book_view_notify_change): if there are pending adds, send
	them before we send the change.
	(pas_book_view_notify_remove): same.
	(pas_book_view_notify_add): the other part of the aggregating
	code.
	(pas_book_view_notify_complete): send pending adds if there are
	any.
	(impl_GNOME_Evolution_Addressbook_BookView_start): new function,
	call pas_backend_start_book_view.
	(pas_book_view_get_card_query): new function.
	(pas_book_view_get_card_sexp): new function.
	(pas_book_view_get_backend): new function.

	* backend/pas/pas-book-view.h: add a PASBackend arg to the
	constructor, as well as the char* query and PASBackendCardSExp
	form.  also add accessors for card_query, card_sexp, and backend.

	* backend/idl/addressbook.idl
	(GNOME::Evolution::Addressbook::BookView): add start() method.
	(GNOME::Evolution::Addressbook::BookListener): remove the oneway
	tag from notifyBookOpened, notifyViewRequested, and
	notifyChangesRequested so the call doesn't return until the remote
	object has gotten the method call.

	* backend/pas/pas-backend.c (pas_backend_load_uri): fill in the
	uri slot if the load was successful.
	(pas_backend_get_uri): return the uri, remove the virtual method
	call.
	(pas_backend_start_book_view): new function.
	(process_client_request): ifdef out the threaded foo, since i'm
	not certain it's at all necessary.
	(real_add_client): remove the bonobo_object_unref of the book,
	since it's immortal.
	(pas_backend_dispose): free the uri.

	* backend/pas/pas-backend.h: remove the get_uri virtual method,
	and add the start_book_view virtual method and
	pas_backend_start_book_view prototype.

2003-07-23  Chris Toshok  <toshok@ximian.com>

	* backend/pas/Makefile.am (libpasvcf_a_SOURCES): new.
	(noinst_LIBRARIES): add libpasvcf.a

	* backend/pas/pas-backend-vcf.[ch]: new files, implement a vcard
	file backend.  the backend api still needs a little work, but it's
	getting easier to write backends.

2003-06-05  Not Zed  <NotZed@Ximian.com>

	** For #42691.

	* gui/component/select-names/Makefile.am (%.server.in): implicit
	rule for .in file.
	(BUILT_SOURCES): added server_DATA.

	* gui/component/Makefile.am (%.server.in): use implicit rule for
	.in file.
	(BUILT_SOURCES): added, just server_DATA.
	(CLEANFILES): added

	* backend/ebook/Makefile.am (BUILT_SOURCES): add server_DATA.

2003-06-04  Rodrigo Moya <rodrigo@ximian.com>

 	* backend/ebook/ebook.c (e_book_do_response_open): adapted to
 	changes in EComponentListener API.

** See ChangeLog.pre-1-4 for older changes

