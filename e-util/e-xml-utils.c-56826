/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
/* 
 *
 * Copyright (C) 2001 Ximian, Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General Public
 * License as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "e-xml-utils.h"
#include <stdlib.h>
#include <libxml/xmlmemory.h>

void
e_g_string_append_xml_escaped (GString *string, const char *value)
{
	while (*value) {
		switch (*value) {
		case '<':
			g_string_append (string, "&lt;");
			break;
		case '>':
			g_string_append (string, "&gt;");
			break;
		case '&':
			g_string_append (string, "&amp;");
			break;
		case '"':
			g_string_append (string, "&quot;");
			break;

		default:
			g_string_append_c (string, *value);
			break;
		}
		value++;
	}
}

char *
e_xml_escape (const char *value)
{
	char *retval;
	GString *escaped;

	escaped = g_string_new (NULL);
	e_g_string_append_xml_escaped (escaped, value);
	retval = escaped->str;
	g_string_free (escaped, FALSE);
	return retval;
}

char *
e_xml_unescape (const char *value)
{
	int i;
	char *retval;
	GString *unescaped = g_string_new ("");

	for (i = 0; value[i]; i++) {
		if (!strncmp (&value[i], "&lt;", 4)) {
			unescaped = g_string_append_c (unescaped, '<');
			i += 3;
		}
		else if (!strncmp (&value[i], "&gt;", 4)) {
			unescaped = g_string_append_c (unescaped, '>');
			i += 3;
		}
		else if (!strncmp (&value[i], "&amp;", 5)) {
			unescaped = g_string_append_c (unescaped, '&');
			i += 4;
		}
		else if (!strncmp (&value[i], "&quot;", 6)) {
			unescaped = g_string_append_c (unescaped, '"');
			i += 5;
		}
		else
			unescaped = g_string_append_c (unescaped, value[i]);
	}

	retval = unescaped->str;
	g_string_free (unescaped, FALSE);

	return retval;
}

GHashTable *
e_xml_file_to_hash (const char *filename, EXmlFileType type)
{
	xmlDoc *doc;
	xmlNode *root, *node;
	const char *key, *value;
	GHashTable *hash;

	doc = xmlParseFile (filename);
	if (!doc)
		return NULL;

	hash = g_hash_table_new (g_str_hash, g_str_equal);

	root = xmlDocGetRootElement (doc);
	for (node = root->xmlChildrenNode; node; node = node->next) {
		if (node->name == NULL)
			continue;

		if (type == E_XML_FILE_TYPE_OBJECT_UID &&
		    !strcmp (node->name, "object"))
			key = xmlGetProp (node, "uid");
		else
			key = node->name;

		value = xmlNodeListGetString (doc, node->xmlChildrenNode, 1);
		if (!key || !value) {
			g_warning ("Found an entry with missing properties!!");
			continue;
		}

		g_hash_table_insert (hash, g_strdup (key), g_strdup (value));
	}

	xmlFreeDoc (doc);
	return hash;
}

struct save_data {
	EXmlFileType type;
	xmlNode *root;
};

static void
foreach_save_func (gpointer key, gpointer value, gpointer user_data)
{
	struct save_data *sd = user_data;
	xmlNodePtr new_node;

	if (sd->type == E_XML_FILE_TYPE_OBJECT_UID) {
		new_node = xmlNewNode (NULL, "object");
		xmlNewProp (new_node, "uid", (const char *) key);
	} else
		new_node = xmlNewNode (NULL, (const char *) key);
	xmlNodeSetContent (new_node, (const char *) value);

	xmlAddChild (sd->root, new_node);
}

void
e_xml_file_from_hash (const char *filename, EXmlFileType type,
			const char *root_name, GHashTable *hash)
{
	xmlDoc *doc;
	struct save_data sd;

	doc = xmlNewDoc ("1.0");
	sd.type = type;
	sd.root = xmlNewDocNode (doc, NULL, root_name, NULL);
	xmlDocSetRootElement (doc, sd.root);

	g_hash_table_foreach (hash, foreach_save_func, &sd);

	xmlSaveFile (filename, doc);
	xmlFreeDoc (doc);
}

static void
free_values (gpointer key, gpointer value, gpointer data)
{
	g_free (key);
	g_free (value);
}

void
e_xml_file_destroy_hash (GHashTable *hash)
{
	g_hash_table_foreach (hash, free_values, NULL);
	g_hash_table_destroy (hash);
}
